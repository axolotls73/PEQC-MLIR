module {
  func.func @kernel_fdtd_2d(%arg0: i32, %arg1: i32, %arg2: i32, %arg3: memref<?x30xf64>, %arg4: memref<?x30xf64>, %arg5: memref<?x30xf64>, %arg6: memref<?xf64>) {
    %cst = arith.constant 0.69999999999999996 : f64
    %cst_0 = arith.constant 5.000000e-01 : f64
    %c0 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    scf.for %arg7 = %c0 to %c2 step %c1 {
      %c0_1 = arith.constant 0 : index
      %c2_2 = arith.constant 2 : index
      %c1_3 = arith.constant 1 : index
      scf.for %arg8 = %c0_1 to %c2_2 step %c1_3 {
        %c0_4 = arith.constant 0 : index
        %c1_5 = arith.constant 1 : index
        %c1_6 = arith.constant 1 : index
        scf.parallel (%arg9) = (%c0_4) to (%c1_5) step (%c1_6) {
          %0 = arith.addi %arg7, %arg9 : index
          %c0_7 = arith.constant 0 : index
          %c1_8 = arith.constant 1 : index
          %c1_9 = arith.constant 1 : index
          scf.parallel (%arg10) = (%c0_7) to (%c1_8) step (%c1_9) {
            %1 = arith.addi %arg8, %arg10 : index
            %c0_10 = arith.constant 0 : index
            %2 = arith.addi %arg8, %arg10 : index
            %3 = arith.cmpi eq, %2, %c0_10 : index
            scf.if %3 {
              %c0_12 = arith.constant 0 : index
              %c32 = arith.constant 32 : index
              %7 = arith.muli %arg7, %c32 : index
              %c32_13 = arith.constant 32 : index
              %8 = arith.muli %arg9, %c32_13 : index
              %9 = arith.addi %7, %8 : index
              %c-29 = arith.constant -29 : index
              %10 = arith.addi %9, %c-29 : index
              %11 = arith.maxsi %c0_12, %10 : index
              %c20 = arith.constant 20 : index
              %c1_14 = arith.constant 1 : index
              scf.for %arg11 = %11 to %c20 step %c1_14 {
                %c0_15 = arith.constant 0 : index
                %12 = arith.addi %arg7, %arg9 : index
                %13 = arith.cmpi eq, %12, %c0_15 : index
                scf.if %13 {
                  %28 = memref.load %arg6[%arg11] : memref<?xf64>
                  %c0_26 = arith.constant 0 : index
                  %c0_27 = arith.constant 0 : index
                  memref.store %28, %arg4[%c0_26, %c0_27] : memref<?x30xf64>
                }
                %c32_16 = arith.constant 32 : index
                %14 = arith.muli %arg7, %c32_16 : index
                %c32_17 = arith.constant 32 : index
                %15 = arith.muli %arg9, %c32_17 : index
                %16 = arith.addi %14, %15 : index
                %c1_18 = arith.constant 1 : index
                %17 = arith.addi %arg11, %c1_18 : index
                %18 = arith.maxsi %16, %17 : index
                %c32_19 = arith.constant 32 : index
                %19 = arith.muli %arg7, %c32_19 : index
                %c32_20 = arith.constant 32 : index
                %20 = arith.muli %arg9, %c32_20 : index
                %21 = arith.addi %19, %20 : index
                %c32_21 = arith.constant 32 : index
                %22 = arith.addi %21, %c32_21 : index
                %c30 = arith.constant 30 : index
                %23 = arith.addi %arg11, %c30 : index
                %24 = arith.minsi %22, %23 : index
                %c1_22 = arith.constant 1 : index
                scf.parallel (%arg12) = (%18) to (%24) step (%c1_22) {
                  %28 = memref.load %arg6[%arg11] : memref<?xf64>
                  %c0_26 = arith.constant 0 : index
                  %c-1_27 = arith.constant -1 : index
                  %29 = arith.muli %arg11, %c-1_27 : index
                  %30 = arith.addi %29, %arg12 : index
                  memref.store %28, %arg4[%c0_26, %30] : memref<?x30xf64>
                  %c0_28 = arith.constant 0 : index
                  %c-1_29 = arith.constant -1 : index
                  %31 = arith.muli %arg11, %c-1_29 : index
                  %32 = arith.addi %31, %arg12 : index
                  %33 = memref.load %arg3[%c0_28, %32] : memref<?x30xf64>
                  %c0_30 = arith.constant 0 : index
                  %c-1_31 = arith.constant -1 : index
                  %34 = arith.muli %arg11, %c-1_31 : index
                  %35 = arith.addi %34, %arg12 : index
                  %36 = memref.load %arg5[%c0_30, %35] : memref<?x30xf64>
                  %c0_32 = arith.constant 0 : index
                  %c-1_33 = arith.constant -1 : index
                  %37 = arith.muli %arg11, %c-1_33 : index
                  %38 = arith.addi %37, %arg12 : index
                  %c-1_34 = arith.constant -1 : index
                  %39 = arith.addi %38, %c-1_34 : index
                  %40 = memref.load %arg5[%c0_32, %39] : memref<?x30xf64>
                  %41 = arith.subf %36, %40 : f64
                  %42 = arith.mulf %41, %cst_0 : f64
                  %43 = arith.subf %33, %42 : f64
                  %c0_35 = arith.constant 0 : index
                  %c-1_36 = arith.constant -1 : index
                  %44 = arith.muli %arg11, %c-1_36 : index
                  %45 = arith.addi %44, %arg12 : index
                  memref.store %43, %arg3[%c0_35, %45] : memref<?x30xf64>
                  scf.reduce 
                }
                %c0_23 = arith.constant 0 : index
                %c-1_24 = arith.constant -1 : index
                %25 = arith.muli %arg11, %c-1_24 : index
                %c31 = arith.constant 31 : index
                %26 = arith.addi %25, %c31 : index
                %c19 = arith.constant 19 : index
                %27 = arith.minsi %26, %c19 : index
                %c1_25 = arith.constant 1 : index
                scf.for %arg12 = %c0_23 to %27 step %c1_25 {
                  %28 = arith.addi %arg11, %arg12 : index
                  %c1_26 = arith.constant 1 : index
                  %29 = arith.addi %28, %c1_26 : index
                  %c0_27 = arith.constant 0 : index
                  %30 = arith.addi %arg7, %arg9 : index
                  %31 = arith.cmpi eq, %30, %c0_27 : index
                  scf.if %31 {
                    %c-1_36 = arith.constant -1 : index
                    %43 = arith.muli %29, %c-1_36 : index
                    %44 = arith.addi %43, %arg11 : index
                    %c0_37 = arith.constant 0 : index
                    %45 = memref.load %arg4[%44, %c0_37] : memref<?x30xf64>
                    %c-1_38 = arith.constant -1 : index
                    %46 = arith.muli %29, %c-1_38 : index
                    %47 = arith.addi %46, %arg11 : index
                    %c0_39 = arith.constant 0 : index
                    %48 = memref.load %arg5[%47, %c0_39] : memref<?x30xf64>
                    %c-1_40 = arith.constant -1 : index
                    %49 = arith.muli %29, %c-1_40 : index
                    %50 = arith.addi %49, %arg11 : index
                    %c-1_41 = arith.constant -1 : index
                    %51 = arith.addi %50, %c-1_41 : index
                    %c0_42 = arith.constant 0 : index
                    %52 = memref.load %arg5[%51, %c0_42] : memref<?x30xf64>
                    %53 = arith.subf %48, %52 : f64
                    %54 = arith.mulf %53, %cst_0 : f64
                    %55 = arith.subf %45, %54 : f64
                    %c-1_43 = arith.constant -1 : index
                    %56 = arith.muli %29, %c-1_43 : index
                    %57 = arith.addi %56, %arg11 : index
                    %c0_44 = arith.constant 0 : index
                    memref.store %55, %arg4[%57, %c0_44] : memref<?x30xf64>
                  }
                  %c32_28 = arith.constant 32 : index
                  %32 = arith.muli %arg7, %c32_28 : index
                  %c32_29 = arith.constant 32 : index
                  %33 = arith.muli %arg9, %c32_29 : index
                  %34 = arith.addi %32, %33 : index
                  %c1_30 = arith.constant 1 : index
                  %35 = arith.addi %arg11, %c1_30 : index
                  %36 = arith.maxsi %34, %35 : index
                  %c32_31 = arith.constant 32 : index
                  %37 = arith.muli %arg7, %c32_31 : index
                  %c32_32 = arith.constant 32 : index
                  %38 = arith.muli %arg9, %c32_32 : index
                  %39 = arith.addi %37, %38 : index
                  %c32_33 = arith.constant 32 : index
                  %40 = arith.addi %39, %c32_33 : index
                  %c30_34 = arith.constant 30 : index
                  %41 = arith.addi %arg11, %c30_34 : index
                  %42 = arith.minsi %40, %41 : index
                  %c1_35 = arith.constant 1 : index
                  scf.for %arg13 = %36 to %42 step %c1_35 {
                    %c-1_36 = arith.constant -1 : index
                    %43 = arith.muli %29, %c-1_36 : index
                    %44 = arith.addi %43, %arg11 : index
                    %c-1_37 = arith.constant -1 : index
                    %45 = arith.muli %arg11, %c-1_37 : index
                    %46 = arith.addi %45, %arg13 : index
                    %47 = memref.load %arg4[%44, %46] : memref<?x30xf64>
                    %c-1_38 = arith.constant -1 : index
                    %48 = arith.muli %29, %c-1_38 : index
                    %49 = arith.addi %48, %arg11 : index
                    %c-1_39 = arith.constant -1 : index
                    %50 = arith.muli %arg11, %c-1_39 : index
                    %51 = arith.addi %50, %arg13 : index
                    %52 = memref.load %arg5[%49, %51] : memref<?x30xf64>
                    %c-1_40 = arith.constant -1 : index
                    %53 = arith.muli %29, %c-1_40 : index
                    %54 = arith.addi %53, %arg11 : index
                    %c-1_41 = arith.constant -1 : index
                    %55 = arith.addi %54, %c-1_41 : index
                    %c-1_42 = arith.constant -1 : index
                    %56 = arith.muli %arg11, %c-1_42 : index
                    %57 = arith.addi %56, %arg13 : index
                    %58 = memref.load %arg5[%55, %57] : memref<?x30xf64>
                    %59 = arith.subf %52, %58 : f64
                    %60 = arith.mulf %59, %cst_0 : f64
                    %61 = arith.subf %47, %60 : f64
                    %c-1_43 = arith.constant -1 : index
                    %62 = arith.muli %29, %c-1_43 : index
                    %63 = arith.addi %62, %arg11 : index
                    %c-1_44 = arith.constant -1 : index
                    %64 = arith.muli %arg11, %c-1_44 : index
                    %65 = arith.addi %64, %arg13 : index
                    memref.store %61, %arg4[%63, %65] : memref<?x30xf64>
                    %c-1_45 = arith.constant -1 : index
                    %66 = arith.muli %29, %c-1_45 : index
                    %67 = arith.addi %66, %arg11 : index
                    %c-1_46 = arith.constant -1 : index
                    %68 = arith.muli %arg11, %c-1_46 : index
                    %69 = arith.addi %68, %arg13 : index
                    %70 = memref.load %arg3[%67, %69] : memref<?x30xf64>
                    %c-1_47 = arith.constant -1 : index
                    %71 = arith.muli %29, %c-1_47 : index
                    %72 = arith.addi %71, %arg11 : index
                    %c-1_48 = arith.constant -1 : index
                    %73 = arith.muli %arg11, %c-1_48 : index
                    %74 = arith.addi %73, %arg13 : index
                    %75 = memref.load %arg5[%72, %74] : memref<?x30xf64>
                    %c-1_49 = arith.constant -1 : index
                    %76 = arith.muli %29, %c-1_49 : index
                    %77 = arith.addi %76, %arg11 : index
                    %c-1_50 = arith.constant -1 : index
                    %78 = arith.muli %arg11, %c-1_50 : index
                    %79 = arith.addi %78, %arg13 : index
                    %c-1_51 = arith.constant -1 : index
                    %80 = arith.addi %79, %c-1_51 : index
                    %81 = memref.load %arg5[%77, %80] : memref<?x30xf64>
                    %82 = arith.subf %75, %81 : f64
                    %83 = arith.mulf %82, %cst_0 : f64
                    %84 = arith.subf %70, %83 : f64
                    %c-1_52 = arith.constant -1 : index
                    %85 = arith.muli %29, %c-1_52 : index
                    %86 = arith.addi %85, %arg11 : index
                    %c-1_53 = arith.constant -1 : index
                    %87 = arith.muli %arg11, %c-1_53 : index
                    %88 = arith.addi %87, %arg13 : index
                    memref.store %84, %arg3[%86, %88] : memref<?x30xf64>
                    %c-1_54 = arith.constant -1 : index
                    %89 = arith.muli %29, %c-1_54 : index
                    %90 = arith.addi %89, %arg11 : index
                    %c-1_55 = arith.constant -1 : index
                    %91 = arith.addi %90, %c-1_55 : index
                    %c-1_56 = arith.constant -1 : index
                    %92 = arith.muli %arg11, %c-1_56 : index
                    %93 = arith.addi %92, %arg13 : index
                    %c-1_57 = arith.constant -1 : index
                    %94 = arith.addi %93, %c-1_57 : index
                    %95 = memref.load %arg5[%91, %94] : memref<?x30xf64>
                    %c-1_58 = arith.constant -1 : index
                    %96 = arith.muli %29, %c-1_58 : index
                    %97 = arith.addi %96, %arg11 : index
                    %c-1_59 = arith.constant -1 : index
                    %98 = arith.addi %97, %c-1_59 : index
                    %c-1_60 = arith.constant -1 : index
                    %99 = arith.muli %arg11, %c-1_60 : index
                    %100 = arith.addi %99, %arg13 : index
                    %101 = memref.load %arg3[%98, %100] : memref<?x30xf64>
                    %c-1_61 = arith.constant -1 : index
                    %102 = arith.muli %29, %c-1_61 : index
                    %103 = arith.addi %102, %arg11 : index
                    %c-1_62 = arith.constant -1 : index
                    %104 = arith.addi %103, %c-1_62 : index
                    %c-1_63 = arith.constant -1 : index
                    %105 = arith.muli %arg11, %c-1_63 : index
                    %106 = arith.addi %105, %arg13 : index
                    %c-1_64 = arith.constant -1 : index
                    %107 = arith.addi %106, %c-1_64 : index
                    %108 = memref.load %arg3[%104, %107] : memref<?x30xf64>
                    %109 = arith.subf %101, %108 : f64
                    %c-1_65 = arith.constant -1 : index
                    %110 = arith.muli %29, %c-1_65 : index
                    %111 = arith.addi %110, %arg11 : index
                    %c-1_66 = arith.constant -1 : index
                    %112 = arith.muli %arg11, %c-1_66 : index
                    %113 = arith.addi %112, %arg13 : index
                    %c-1_67 = arith.constant -1 : index
                    %114 = arith.addi %113, %c-1_67 : index
                    %115 = memref.load %arg4[%111, %114] : memref<?x30xf64>
                    %116 = arith.addf %109, %115 : f64
                    %c-1_68 = arith.constant -1 : index
                    %117 = arith.muli %29, %c-1_68 : index
                    %118 = arith.addi %117, %arg11 : index
                    %c-1_69 = arith.constant -1 : index
                    %119 = arith.addi %118, %c-1_69 : index
                    %c-1_70 = arith.constant -1 : index
                    %120 = arith.muli %arg11, %c-1_70 : index
                    %121 = arith.addi %120, %arg13 : index
                    %c-1_71 = arith.constant -1 : index
                    %122 = arith.addi %121, %c-1_71 : index
                    %123 = memref.load %arg4[%119, %122] : memref<?x30xf64>
                    %124 = arith.subf %116, %123 : f64
                    %125 = arith.mulf %124, %cst : f64
                    %126 = arith.subf %95, %125 : f64
                    %c-1_72 = arith.constant -1 : index
                    %127 = arith.muli %29, %c-1_72 : index
                    %128 = arith.addi %127, %arg11 : index
                    %c-1_73 = arith.constant -1 : index
                    %129 = arith.addi %128, %c-1_73 : index
                    %c-1_74 = arith.constant -1 : index
                    %130 = arith.muli %arg11, %c-1_74 : index
                    %131 = arith.addi %130, %arg13 : index
                    %c-1_75 = arith.constant -1 : index
                    %132 = arith.addi %131, %c-1_75 : index
                    memref.store %126, %arg5[%129, %132] : memref<?x30xf64>
                  }
                }
              }
            }
            %c0_11 = arith.constant 0 : index
            %4 = arith.addi %arg8, %arg10 : index
            %c-1 = arith.constant -1 : index
            %5 = arith.addi %4, %c-1 : index
            %6 = arith.cmpi eq, %5, %c0_11 : index
            scf.if %6 {
              %c0_12 = arith.constant 0 : index
              %c7 = arith.constant 7 : index
              %c1_13 = arith.constant 1 : index
              scf.for %arg11 = %c0_12 to %c7 step %c1_13 {
                %c13 = arith.constant 13 : index
                %7 = arith.addi %arg11, %c13 : index
                %c0_14 = arith.constant 0 : index
                %c1_15 = arith.constant 1 : index
                %8 = arith.addi %arg11, %c1_15 : index
                %c1_16 = arith.constant 1 : index
                scf.for %arg12 = %c0_14 to %8 step %c1_16 {
                  %c32 = arith.constant 32 : index
                  %9 = arith.addi %arg12, %c32 : index
                  %c0_17 = arith.constant 0 : index
                  %10 = arith.addi %arg7, %arg9 : index
                  %11 = arith.cmpi eq, %10, %c0_17 : index
                  scf.if %11 {
                    %c-1_24 = arith.constant -1 : index
                    %23 = arith.muli %9, %c-1_24 : index
                    %24 = arith.addi %23, %7 : index
                    %c0_25 = arith.constant 0 : index
                    %25 = memref.load %arg4[%24, %c0_25] : memref<?x30xf64>
                    %c-1_26 = arith.constant -1 : index
                    %26 = arith.muli %9, %c-1_26 : index
                    %27 = arith.addi %26, %7 : index
                    %c0_27 = arith.constant 0 : index
                    %28 = memref.load %arg5[%27, %c0_27] : memref<?x30xf64>
                    %c-1_28 = arith.constant -1 : index
                    %29 = arith.muli %9, %c-1_28 : index
                    %30 = arith.addi %29, %7 : index
                    %c-1_29 = arith.constant -1 : index
                    %31 = arith.addi %30, %c-1_29 : index
                    %c0_30 = arith.constant 0 : index
                    %32 = memref.load %arg5[%31, %c0_30] : memref<?x30xf64>
                    %33 = arith.subf %28, %32 : f64
                    %34 = arith.mulf %33, %cst_0 : f64
                    %35 = arith.subf %25, %34 : f64
                    %c-1_31 = arith.constant -1 : index
                    %36 = arith.muli %9, %c-1_31 : index
                    %37 = arith.addi %36, %7 : index
                    %c0_32 = arith.constant 0 : index
                    memref.store %35, %arg4[%37, %c0_32] : memref<?x30xf64>
                  }
                  %c32_18 = arith.constant 32 : index
                  %12 = arith.muli %arg7, %c32_18 : index
                  %c32_19 = arith.constant 32 : index
                  %13 = arith.muli %arg9, %c32_19 : index
                  %14 = arith.addi %12, %13 : index
                  %c14 = arith.constant 14 : index
                  %15 = arith.addi %arg11, %c14 : index
                  %16 = arith.maxsi %14, %15 : index
                  %c32_20 = arith.constant 32 : index
                  %17 = arith.muli %arg7, %c32_20 : index
                  %c32_21 = arith.constant 32 : index
                  %18 = arith.muli %arg9, %c32_21 : index
                  %19 = arith.addi %17, %18 : index
                  %c32_22 = arith.constant 32 : index
                  %20 = arith.addi %19, %c32_22 : index
                  %c43 = arith.constant 43 : index
                  %21 = arith.addi %arg11, %c43 : index
                  %22 = arith.minsi %20, %21 : index
                  %c1_23 = arith.constant 1 : index
                  scf.for %arg13 = %16 to %22 step %c1_23 {
                    %c-1_24 = arith.constant -1 : index
                    %23 = arith.muli %9, %c-1_24 : index
                    %24 = arith.addi %23, %7 : index
                    %c-1_25 = arith.constant -1 : index
                    %25 = arith.muli %7, %c-1_25 : index
                    %26 = arith.addi %25, %arg13 : index
                    %27 = memref.load %arg4[%24, %26] : memref<?x30xf64>
                    %c-1_26 = arith.constant -1 : index
                    %28 = arith.muli %9, %c-1_26 : index
                    %29 = arith.addi %28, %7 : index
                    %c-1_27 = arith.constant -1 : index
                    %30 = arith.muli %7, %c-1_27 : index
                    %31 = arith.addi %30, %arg13 : index
                    %32 = memref.load %arg5[%29, %31] : memref<?x30xf64>
                    %c-1_28 = arith.constant -1 : index
                    %33 = arith.muli %9, %c-1_28 : index
                    %34 = arith.addi %33, %7 : index
                    %c-1_29 = arith.constant -1 : index
                    %35 = arith.addi %34, %c-1_29 : index
                    %c-1_30 = arith.constant -1 : index
                    %36 = arith.muli %7, %c-1_30 : index
                    %37 = arith.addi %36, %arg13 : index
                    %38 = memref.load %arg5[%35, %37] : memref<?x30xf64>
                    %39 = arith.subf %32, %38 : f64
                    %40 = arith.mulf %39, %cst_0 : f64
                    %41 = arith.subf %27, %40 : f64
                    %c-1_31 = arith.constant -1 : index
                    %42 = arith.muli %9, %c-1_31 : index
                    %43 = arith.addi %42, %7 : index
                    %c-1_32 = arith.constant -1 : index
                    %44 = arith.muli %7, %c-1_32 : index
                    %45 = arith.addi %44, %arg13 : index
                    memref.store %41, %arg4[%43, %45] : memref<?x30xf64>
                    %c-1_33 = arith.constant -1 : index
                    %46 = arith.muli %9, %c-1_33 : index
                    %47 = arith.addi %46, %7 : index
                    %c-1_34 = arith.constant -1 : index
                    %48 = arith.muli %7, %c-1_34 : index
                    %49 = arith.addi %48, %arg13 : index
                    %50 = memref.load %arg3[%47, %49] : memref<?x30xf64>
                    %c-1_35 = arith.constant -1 : index
                    %51 = arith.muli %9, %c-1_35 : index
                    %52 = arith.addi %51, %7 : index
                    %c-1_36 = arith.constant -1 : index
                    %53 = arith.muli %7, %c-1_36 : index
                    %54 = arith.addi %53, %arg13 : index
                    %55 = memref.load %arg5[%52, %54] : memref<?x30xf64>
                    %c-1_37 = arith.constant -1 : index
                    %56 = arith.muli %9, %c-1_37 : index
                    %57 = arith.addi %56, %7 : index
                    %c-1_38 = arith.constant -1 : index
                    %58 = arith.muli %7, %c-1_38 : index
                    %59 = arith.addi %58, %arg13 : index
                    %c-1_39 = arith.constant -1 : index
                    %60 = arith.addi %59, %c-1_39 : index
                    %61 = memref.load %arg5[%57, %60] : memref<?x30xf64>
                    %62 = arith.subf %55, %61 : f64
                    %63 = arith.mulf %62, %cst_0 : f64
                    %64 = arith.subf %50, %63 : f64
                    %c-1_40 = arith.constant -1 : index
                    %65 = arith.muli %9, %c-1_40 : index
                    %66 = arith.addi %65, %7 : index
                    %c-1_41 = arith.constant -1 : index
                    %67 = arith.muli %7, %c-1_41 : index
                    %68 = arith.addi %67, %arg13 : index
                    memref.store %64, %arg3[%66, %68] : memref<?x30xf64>
                    %c-1_42 = arith.constant -1 : index
                    %69 = arith.muli %9, %c-1_42 : index
                    %70 = arith.addi %69, %7 : index
                    %c-1_43 = arith.constant -1 : index
                    %71 = arith.addi %70, %c-1_43 : index
                    %c-1_44 = arith.constant -1 : index
                    %72 = arith.muli %7, %c-1_44 : index
                    %73 = arith.addi %72, %arg13 : index
                    %c-1_45 = arith.constant -1 : index
                    %74 = arith.addi %73, %c-1_45 : index
                    %75 = memref.load %arg5[%71, %74] : memref<?x30xf64>
                    %c-1_46 = arith.constant -1 : index
                    %76 = arith.muli %9, %c-1_46 : index
                    %77 = arith.addi %76, %7 : index
                    %c-1_47 = arith.constant -1 : index
                    %78 = arith.addi %77, %c-1_47 : index
                    %c-1_48 = arith.constant -1 : index
                    %79 = arith.muli %7, %c-1_48 : index
                    %80 = arith.addi %79, %arg13 : index
                    %81 = memref.load %arg3[%78, %80] : memref<?x30xf64>
                    %c-1_49 = arith.constant -1 : index
                    %82 = arith.muli %9, %c-1_49 : index
                    %83 = arith.addi %82, %7 : index
                    %c-1_50 = arith.constant -1 : index
                    %84 = arith.addi %83, %c-1_50 : index
                    %c-1_51 = arith.constant -1 : index
                    %85 = arith.muli %7, %c-1_51 : index
                    %86 = arith.addi %85, %arg13 : index
                    %c-1_52 = arith.constant -1 : index
                    %87 = arith.addi %86, %c-1_52 : index
                    %88 = memref.load %arg3[%84, %87] : memref<?x30xf64>
                    %89 = arith.subf %81, %88 : f64
                    %c-1_53 = arith.constant -1 : index
                    %90 = arith.muli %9, %c-1_53 : index
                    %91 = arith.addi %90, %7 : index
                    %c-1_54 = arith.constant -1 : index
                    %92 = arith.muli %7, %c-1_54 : index
                    %93 = arith.addi %92, %arg13 : index
                    %c-1_55 = arith.constant -1 : index
                    %94 = arith.addi %93, %c-1_55 : index
                    %95 = memref.load %arg4[%91, %94] : memref<?x30xf64>
                    %96 = arith.addf %89, %95 : f64
                    %c-1_56 = arith.constant -1 : index
                    %97 = arith.muli %9, %c-1_56 : index
                    %98 = arith.addi %97, %7 : index
                    %c-1_57 = arith.constant -1 : index
                    %99 = arith.addi %98, %c-1_57 : index
                    %c-1_58 = arith.constant -1 : index
                    %100 = arith.muli %7, %c-1_58 : index
                    %101 = arith.addi %100, %arg13 : index
                    %c-1_59 = arith.constant -1 : index
                    %102 = arith.addi %101, %c-1_59 : index
                    %103 = memref.load %arg4[%99, %102] : memref<?x30xf64>
                    %104 = arith.subf %96, %103 : f64
                    %105 = arith.mulf %104, %cst : f64
                    %106 = arith.subf %75, %105 : f64
                    %c-1_60 = arith.constant -1 : index
                    %107 = arith.muli %9, %c-1_60 : index
                    %108 = arith.addi %107, %7 : index
                    %c-1_61 = arith.constant -1 : index
                    %109 = arith.addi %108, %c-1_61 : index
                    %c-1_62 = arith.constant -1 : index
                    %110 = arith.muli %7, %c-1_62 : index
                    %111 = arith.addi %110, %arg13 : index
                    %c-1_63 = arith.constant -1 : index
                    %112 = arith.addi %111, %c-1_63 : index
                    memref.store %106, %arg5[%109, %112] : memref<?x30xf64>
                  }
                }
              }
            }
            scf.reduce 
          }
          scf.reduce 
        }
      }
    }
    return
  }
}

