module {
  func.func @kernel_fdtd_2d(%arg0: i32, %arg1: i32, %arg2: i32, %arg3: memref<?x30xf64>, %arg4: memref<?x30xf64>, %arg5: memref<?x30xf64>, %arg6: memref<?xf64>) {
    %cst = arith.constant 0.69999999999999996 : f64
    %cst_0 = arith.constant 5.000000e-01 : f64
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c1_1 = arith.constant 1 : index
    scf.for %arg7 = %c0 to %c1 step %c1_1 {
      %c32 = arith.constant 32 : index
      %0 = arith.muli %arg7, %c32 : index
      %c0_2 = arith.constant 0 : index
      %c1_3 = arith.constant 1 : index
      %c1_4 = arith.constant 1 : index
      scf.for %arg8 = %c0_2 to %c1_3 step %c1_4 {
        %c32_5 = arith.constant 32 : index
        %1 = arith.muli %arg8, %c32_5 : index
        %c0_6 = arith.constant 0 : index
        %c2 = arith.constant 2 : index
        %c1_7 = arith.constant 1 : index
        scf.for %arg9 = %c0_6 to %c2 step %c1_7 {
          %2 = arith.addi %0, %arg9 : index
          %c0_8 = arith.constant 0 : index
          %c2_9 = arith.constant 2 : index
          %c1_10 = arith.constant 1 : index
          scf.for %arg10 = %c0_8 to %c2_9 step %c1_10 {
            %3 = arith.addi %1, %arg10 : index
            %c0_11 = arith.constant 0 : index
            %c32_12 = arith.constant 32 : index
            %4 = arith.muli %arg8, %c32_12 : index
            %5 = arith.addi %arg10, %4 : index
            %6 = arith.cmpi eq, %5, %c0_11 : index
            scf.if %6 {
              %c0_15 = arith.constant 0 : index
              %c32_16 = arith.constant 32 : index
              %11 = arith.muli %arg9, %c32_16 : index
              %c1024 = arith.constant 1024 : index
              %12 = arith.muli %arg7, %c1024 : index
              %13 = arith.addi %11, %12 : index
              %c-29 = arith.constant -29 : index
              %14 = arith.addi %13, %c-29 : index
              %15 = arith.maxsi %c0_15, %14 : index
              %c20 = arith.constant 20 : index
              %c1_17 = arith.constant 1 : index
              scf.for %arg11 = %15 to %c20 step %c1_17 {
                %c0_18 = arith.constant 0 : index
                %c32_19 = arith.constant 32 : index
                %16 = arith.muli %arg7, %c32_19 : index
                %17 = arith.addi %arg9, %16 : index
                %18 = arith.cmpi eq, %17, %c0_18 : index
                scf.if %18 {
                  %34 = memref.load %arg6[%arg11] : memref<?xf64>
                  %c0_30 = arith.constant 0 : index
                  %c0_31 = arith.constant 0 : index
                  memref.store %34, %arg4[%c0_30, %c0_31] : memref<?x30xf64>
                }
                %19 = memref.load %arg6[%arg11] : memref<?xf64>
                %c32_20 = arith.constant 32 : index
                %20 = arith.muli %arg9, %c32_20 : index
                %c1024_21 = arith.constant 1024 : index
                %21 = arith.muli %arg7, %c1024_21 : index
                %22 = arith.addi %20, %21 : index
                %c1_22 = arith.constant 1 : index
                %23 = arith.addi %arg11, %c1_22 : index
                %24 = arith.maxsi %22, %23 : index
                %c32_23 = arith.constant 32 : index
                %25 = arith.muli %arg9, %c32_23 : index
                %c1024_24 = arith.constant 1024 : index
                %26 = arith.muli %arg7, %c1024_24 : index
                %27 = arith.addi %25, %26 : index
                %c32_25 = arith.constant 32 : index
                %28 = arith.addi %27, %c32_25 : index
                %c30 = arith.constant 30 : index
                %29 = arith.addi %arg11, %c30 : index
                %30 = arith.minsi %28, %29 : index
                %c1_26 = arith.constant 1 : index
                scf.for %arg12 = %24 to %30 step %c1_26 {
                  %c0_30 = arith.constant 0 : index
                  %c-1_31 = arith.constant -1 : index
                  %34 = arith.muli %arg11, %c-1_31 : index
                  %35 = arith.addi %34, %arg12 : index
                  memref.store %19, %arg4[%c0_30, %35] : memref<?x30xf64>
                  %c0_32 = arith.constant 0 : index
                  %c-1_33 = arith.constant -1 : index
                  %36 = arith.muli %arg11, %c-1_33 : index
                  %37 = arith.addi %36, %arg12 : index
                  %38 = memref.load %arg3[%c0_32, %37] : memref<?x30xf64>
                  %c0_34 = arith.constant 0 : index
                  %c-1_35 = arith.constant -1 : index
                  %39 = arith.muli %arg11, %c-1_35 : index
                  %40 = arith.addi %39, %arg12 : index
                  %41 = memref.load %arg5[%c0_34, %40] : memref<?x30xf64>
                  %c0_36 = arith.constant 0 : index
                  %c-1_37 = arith.constant -1 : index
                  %42 = arith.muli %arg11, %c-1_37 : index
                  %43 = arith.addi %42, %arg12 : index
                  %c-1_38 = arith.constant -1 : index
                  %44 = arith.addi %43, %c-1_38 : index
                  %45 = memref.load %arg5[%c0_36, %44] : memref<?x30xf64>
                  %46 = arith.subf %41, %45 : f64
                  %47 = arith.mulf %46, %cst_0 : f64
                  %48 = arith.subf %38, %47 : f64
                  %c0_39 = arith.constant 0 : index
                  %c-1_40 = arith.constant -1 : index
                  %49 = arith.muli %arg11, %c-1_40 : index
                  %50 = arith.addi %49, %arg12 : index
                  memref.store %48, %arg3[%c0_39, %50] : memref<?x30xf64>
                }
                %c0_27 = arith.constant 0 : index
                %c-1_28 = arith.constant -1 : index
                %31 = arith.muli %arg11, %c-1_28 : index
                %c31 = arith.constant 31 : index
                %32 = arith.addi %31, %c31 : index
                %c19 = arith.constant 19 : index
                %33 = arith.minsi %32, %c19 : index
                %c1_29 = arith.constant 1 : index
                scf.for %arg12 = %c0_27 to %33 step %c1_29 {
                  %34 = arith.addi %arg11, %arg12 : index
                  %c1_30 = arith.constant 1 : index
                  %35 = arith.addi %34, %c1_30 : index
                  %c0_31 = arith.constant 0 : index
                  %c32_32 = arith.constant 32 : index
                  %36 = arith.muli %arg7, %c32_32 : index
                  %37 = arith.addi %arg9, %36 : index
                  %38 = arith.cmpi eq, %37, %c0_31 : index
                  scf.if %38 {
                    %c-1_41 = arith.constant -1 : index
                    %50 = arith.muli %35, %c-1_41 : index
                    %51 = arith.addi %50, %arg11 : index
                    %c0_42 = arith.constant 0 : index
                    %52 = memref.load %arg4[%51, %c0_42] : memref<?x30xf64>
                    %c-1_43 = arith.constant -1 : index
                    %53 = arith.muli %35, %c-1_43 : index
                    %54 = arith.addi %53, %arg11 : index
                    %c0_44 = arith.constant 0 : index
                    %55 = memref.load %arg5[%54, %c0_44] : memref<?x30xf64>
                    %c-1_45 = arith.constant -1 : index
                    %56 = arith.muli %35, %c-1_45 : index
                    %57 = arith.addi %56, %arg11 : index
                    %c-1_46 = arith.constant -1 : index
                    %58 = arith.addi %57, %c-1_46 : index
                    %c0_47 = arith.constant 0 : index
                    %59 = memref.load %arg5[%58, %c0_47] : memref<?x30xf64>
                    %60 = arith.subf %55, %59 : f64
                    %61 = arith.mulf %60, %cst_0 : f64
                    %62 = arith.subf %52, %61 : f64
                    %c-1_48 = arith.constant -1 : index
                    %63 = arith.muli %35, %c-1_48 : index
                    %64 = arith.addi %63, %arg11 : index
                    %c0_49 = arith.constant 0 : index
                    memref.store %62, %arg4[%64, %c0_49] : memref<?x30xf64>
                  }
                  %c32_33 = arith.constant 32 : index
                  %39 = arith.muli %arg9, %c32_33 : index
                  %c1024_34 = arith.constant 1024 : index
                  %40 = arith.muli %arg7, %c1024_34 : index
                  %41 = arith.addi %39, %40 : index
                  %c1_35 = arith.constant 1 : index
                  %42 = arith.addi %arg11, %c1_35 : index
                  %43 = arith.maxsi %41, %42 : index
                  %c32_36 = arith.constant 32 : index
                  %44 = arith.muli %arg9, %c32_36 : index
                  %c1024_37 = arith.constant 1024 : index
                  %45 = arith.muli %arg7, %c1024_37 : index
                  %46 = arith.addi %44, %45 : index
                  %c32_38 = arith.constant 32 : index
                  %47 = arith.addi %46, %c32_38 : index
                  %c30_39 = arith.constant 30 : index
                  %48 = arith.addi %arg11, %c30_39 : index
                  %49 = arith.minsi %47, %48 : index
                  %c1_40 = arith.constant 1 : index
                  scf.for %arg13 = %43 to %49 step %c1_40 {
                    %c-1_41 = arith.constant -1 : index
                    %50 = arith.muli %35, %c-1_41 : index
                    %51 = arith.addi %50, %arg11 : index
                    %c-1_42 = arith.constant -1 : index
                    %52 = arith.muli %arg11, %c-1_42 : index
                    %53 = arith.addi %52, %arg13 : index
                    %54 = memref.load %arg4[%51, %53] : memref<?x30xf64>
                    %c-1_43 = arith.constant -1 : index
                    %55 = arith.muli %35, %c-1_43 : index
                    %56 = arith.addi %55, %arg11 : index
                    %c-1_44 = arith.constant -1 : index
                    %57 = arith.muli %arg11, %c-1_44 : index
                    %58 = arith.addi %57, %arg13 : index
                    %59 = memref.load %arg5[%56, %58] : memref<?x30xf64>
                    %c-1_45 = arith.constant -1 : index
                    %60 = arith.muli %35, %c-1_45 : index
                    %61 = arith.addi %60, %arg11 : index
                    %c-1_46 = arith.constant -1 : index
                    %62 = arith.addi %61, %c-1_46 : index
                    %c-1_47 = arith.constant -1 : index
                    %63 = arith.muli %arg11, %c-1_47 : index
                    %64 = arith.addi %63, %arg13 : index
                    %65 = memref.load %arg5[%62, %64] : memref<?x30xf64>
                    %66 = arith.subf %59, %65 : f64
                    %67 = arith.mulf %66, %cst_0 : f64
                    %68 = arith.subf %54, %67 : f64
                    %c-1_48 = arith.constant -1 : index
                    %69 = arith.muli %35, %c-1_48 : index
                    %70 = arith.addi %69, %arg11 : index
                    %c-1_49 = arith.constant -1 : index
                    %71 = arith.muli %arg11, %c-1_49 : index
                    %72 = arith.addi %71, %arg13 : index
                    memref.store %68, %arg4[%70, %72] : memref<?x30xf64>
                    %c-1_50 = arith.constant -1 : index
                    %73 = arith.muli %35, %c-1_50 : index
                    %74 = arith.addi %73, %arg11 : index
                    %c-1_51 = arith.constant -1 : index
                    %75 = arith.muli %arg11, %c-1_51 : index
                    %76 = arith.addi %75, %arg13 : index
                    %77 = memref.load %arg3[%74, %76] : memref<?x30xf64>
                    %c-1_52 = arith.constant -1 : index
                    %78 = arith.muli %35, %c-1_52 : index
                    %79 = arith.addi %78, %arg11 : index
                    %c-1_53 = arith.constant -1 : index
                    %80 = arith.muli %arg11, %c-1_53 : index
                    %81 = arith.addi %80, %arg13 : index
                    %82 = memref.load %arg5[%79, %81] : memref<?x30xf64>
                    %c-1_54 = arith.constant -1 : index
                    %83 = arith.muli %35, %c-1_54 : index
                    %84 = arith.addi %83, %arg11 : index
                    %c-1_55 = arith.constant -1 : index
                    %85 = arith.muli %arg11, %c-1_55 : index
                    %86 = arith.addi %85, %arg13 : index
                    %c-1_56 = arith.constant -1 : index
                    %87 = arith.addi %86, %c-1_56 : index
                    %88 = memref.load %arg5[%84, %87] : memref<?x30xf64>
                    %89 = arith.subf %82, %88 : f64
                    %90 = arith.mulf %89, %cst_0 : f64
                    %91 = arith.subf %77, %90 : f64
                    %c-1_57 = arith.constant -1 : index
                    %92 = arith.muli %35, %c-1_57 : index
                    %93 = arith.addi %92, %arg11 : index
                    %c-1_58 = arith.constant -1 : index
                    %94 = arith.muli %arg11, %c-1_58 : index
                    %95 = arith.addi %94, %arg13 : index
                    memref.store %91, %arg3[%93, %95] : memref<?x30xf64>
                    %c-1_59 = arith.constant -1 : index
                    %96 = arith.muli %35, %c-1_59 : index
                    %97 = arith.addi %96, %arg11 : index
                    %c-1_60 = arith.constant -1 : index
                    %98 = arith.addi %97, %c-1_60 : index
                    %c-1_61 = arith.constant -1 : index
                    %99 = arith.muli %arg11, %c-1_61 : index
                    %100 = arith.addi %99, %arg13 : index
                    %c-1_62 = arith.constant -1 : index
                    %101 = arith.addi %100, %c-1_62 : index
                    %102 = memref.load %arg5[%98, %101] : memref<?x30xf64>
                    %c-1_63 = arith.constant -1 : index
                    %103 = arith.muli %35, %c-1_63 : index
                    %104 = arith.addi %103, %arg11 : index
                    %c-1_64 = arith.constant -1 : index
                    %105 = arith.addi %104, %c-1_64 : index
                    %c-1_65 = arith.constant -1 : index
                    %106 = arith.muli %arg11, %c-1_65 : index
                    %107 = arith.addi %106, %arg13 : index
                    %108 = memref.load %arg3[%105, %107] : memref<?x30xf64>
                    %c-1_66 = arith.constant -1 : index
                    %109 = arith.muli %35, %c-1_66 : index
                    %110 = arith.addi %109, %arg11 : index
                    %c-1_67 = arith.constant -1 : index
                    %111 = arith.addi %110, %c-1_67 : index
                    %c-1_68 = arith.constant -1 : index
                    %112 = arith.muli %arg11, %c-1_68 : index
                    %113 = arith.addi %112, %arg13 : index
                    %c-1_69 = arith.constant -1 : index
                    %114 = arith.addi %113, %c-1_69 : index
                    %115 = memref.load %arg3[%111, %114] : memref<?x30xf64>
                    %116 = arith.subf %108, %115 : f64
                    %c-1_70 = arith.constant -1 : index
                    %117 = arith.muli %35, %c-1_70 : index
                    %118 = arith.addi %117, %arg11 : index
                    %c-1_71 = arith.constant -1 : index
                    %119 = arith.muli %arg11, %c-1_71 : index
                    %120 = arith.addi %119, %arg13 : index
                    %c-1_72 = arith.constant -1 : index
                    %121 = arith.addi %120, %c-1_72 : index
                    %122 = memref.load %arg4[%118, %121] : memref<?x30xf64>
                    %123 = arith.addf %116, %122 : f64
                    %c-1_73 = arith.constant -1 : index
                    %124 = arith.muli %35, %c-1_73 : index
                    %125 = arith.addi %124, %arg11 : index
                    %c-1_74 = arith.constant -1 : index
                    %126 = arith.addi %125, %c-1_74 : index
                    %c-1_75 = arith.constant -1 : index
                    %127 = arith.muli %arg11, %c-1_75 : index
                    %128 = arith.addi %127, %arg13 : index
                    %c-1_76 = arith.constant -1 : index
                    %129 = arith.addi %128, %c-1_76 : index
                    %130 = memref.load %arg4[%126, %129] : memref<?x30xf64>
                    %131 = arith.subf %123, %130 : f64
                    %132 = arith.mulf %131, %cst : f64
                    %133 = arith.subf %102, %132 : f64
                    %c-1_77 = arith.constant -1 : index
                    %134 = arith.muli %35, %c-1_77 : index
                    %135 = arith.addi %134, %arg11 : index
                    %c-1_78 = arith.constant -1 : index
                    %136 = arith.addi %135, %c-1_78 : index
                    %c-1_79 = arith.constant -1 : index
                    %137 = arith.muli %arg11, %c-1_79 : index
                    %138 = arith.addi %137, %arg13 : index
                    %c-1_80 = arith.constant -1 : index
                    %139 = arith.addi %138, %c-1_80 : index
                    memref.store %133, %arg5[%136, %139] : memref<?x30xf64>
                  }
                }
              }
            }
            %c0_13 = arith.constant 0 : index
            %c32_14 = arith.constant 32 : index
            %7 = arith.muli %arg8, %c32_14 : index
            %8 = arith.addi %arg10, %7 : index
            %c-1 = arith.constant -1 : index
            %9 = arith.addi %8, %c-1 : index
            %10 = arith.cmpi eq, %9, %c0_13 : index
            scf.if %10 {
              %c0_15 = arith.constant 0 : index
              %c7 = arith.constant 7 : index
              %c1_16 = arith.constant 1 : index
              scf.for %arg11 = %c0_15 to %c7 step %c1_16 {
                %c13 = arith.constant 13 : index
                %11 = arith.addi %arg11, %c13 : index
                %c0_17 = arith.constant 0 : index
                %c1_18 = arith.constant 1 : index
                %12 = arith.addi %arg11, %c1_18 : index
                %c1_19 = arith.constant 1 : index
                scf.for %arg12 = %c0_17 to %12 step %c1_19 {
                  %c32_20 = arith.constant 32 : index
                  %13 = arith.addi %arg12, %c32_20 : index
                  %c0_21 = arith.constant 0 : index
                  %c32_22 = arith.constant 32 : index
                  %14 = arith.muli %arg7, %c32_22 : index
                  %15 = arith.addi %arg9, %14 : index
                  %16 = arith.cmpi eq, %15, %c0_21 : index
                  scf.if %16 {
                    %c-1_28 = arith.constant -1 : index
                    %28 = arith.muli %13, %c-1_28 : index
                    %29 = arith.addi %28, %11 : index
                    %c0_29 = arith.constant 0 : index
                    %30 = memref.load %arg4[%29, %c0_29] : memref<?x30xf64>
                    %c-1_30 = arith.constant -1 : index
                    %31 = arith.muli %13, %c-1_30 : index
                    %32 = arith.addi %31, %11 : index
                    %c0_31 = arith.constant 0 : index
                    %33 = memref.load %arg5[%32, %c0_31] : memref<?x30xf64>
                    %c-1_32 = arith.constant -1 : index
                    %34 = arith.muli %13, %c-1_32 : index
                    %35 = arith.addi %34, %11 : index
                    %c-1_33 = arith.constant -1 : index
                    %36 = arith.addi %35, %c-1_33 : index
                    %c0_34 = arith.constant 0 : index
                    %37 = memref.load %arg5[%36, %c0_34] : memref<?x30xf64>
                    %38 = arith.subf %33, %37 : f64
                    %39 = arith.mulf %38, %cst_0 : f64
                    %40 = arith.subf %30, %39 : f64
                    %c-1_35 = arith.constant -1 : index
                    %41 = arith.muli %13, %c-1_35 : index
                    %42 = arith.addi %41, %11 : index
                    %c0_36 = arith.constant 0 : index
                    memref.store %40, %arg4[%42, %c0_36] : memref<?x30xf64>
                  }
                  %c32_23 = arith.constant 32 : index
                  %17 = arith.muli %arg9, %c32_23 : index
                  %c1024 = arith.constant 1024 : index
                  %18 = arith.muli %arg7, %c1024 : index
                  %19 = arith.addi %17, %18 : index
                  %c14 = arith.constant 14 : index
                  %20 = arith.addi %arg11, %c14 : index
                  %21 = arith.maxsi %19, %20 : index
                  %c32_24 = arith.constant 32 : index
                  %22 = arith.muli %arg9, %c32_24 : index
                  %c1024_25 = arith.constant 1024 : index
                  %23 = arith.muli %arg7, %c1024_25 : index
                  %24 = arith.addi %22, %23 : index
                  %c32_26 = arith.constant 32 : index
                  %25 = arith.addi %24, %c32_26 : index
                  %c43 = arith.constant 43 : index
                  %26 = arith.addi %arg11, %c43 : index
                  %27 = arith.minsi %25, %26 : index
                  %c1_27 = arith.constant 1 : index
                  scf.for %arg13 = %21 to %27 step %c1_27 {
                    %c-1_28 = arith.constant -1 : index
                    %28 = arith.muli %13, %c-1_28 : index
                    %29 = arith.addi %28, %11 : index
                    %c-1_29 = arith.constant -1 : index
                    %30 = arith.muli %11, %c-1_29 : index
                    %31 = arith.addi %30, %arg13 : index
                    %32 = memref.load %arg4[%29, %31] : memref<?x30xf64>
                    %c-1_30 = arith.constant -1 : index
                    %33 = arith.muli %13, %c-1_30 : index
                    %34 = arith.addi %33, %11 : index
                    %c-1_31 = arith.constant -1 : index
                    %35 = arith.muli %11, %c-1_31 : index
                    %36 = arith.addi %35, %arg13 : index
                    %37 = memref.load %arg5[%34, %36] : memref<?x30xf64>
                    %c-1_32 = arith.constant -1 : index
                    %38 = arith.muli %13, %c-1_32 : index
                    %39 = arith.addi %38, %11 : index
                    %c-1_33 = arith.constant -1 : index
                    %40 = arith.addi %39, %c-1_33 : index
                    %c-1_34 = arith.constant -1 : index
                    %41 = arith.muli %11, %c-1_34 : index
                    %42 = arith.addi %41, %arg13 : index
                    %43 = memref.load %arg5[%40, %42] : memref<?x30xf64>
                    %44 = arith.subf %37, %43 : f64
                    %45 = arith.mulf %44, %cst_0 : f64
                    %46 = arith.subf %32, %45 : f64
                    %c-1_35 = arith.constant -1 : index
                    %47 = arith.muli %13, %c-1_35 : index
                    %48 = arith.addi %47, %11 : index
                    %c-1_36 = arith.constant -1 : index
                    %49 = arith.muli %11, %c-1_36 : index
                    %50 = arith.addi %49, %arg13 : index
                    memref.store %46, %arg4[%48, %50] : memref<?x30xf64>
                    %c-1_37 = arith.constant -1 : index
                    %51 = arith.muli %13, %c-1_37 : index
                    %52 = arith.addi %51, %11 : index
                    %c-1_38 = arith.constant -1 : index
                    %53 = arith.muli %11, %c-1_38 : index
                    %54 = arith.addi %53, %arg13 : index
                    %55 = memref.load %arg3[%52, %54] : memref<?x30xf64>
                    %c-1_39 = arith.constant -1 : index
                    %56 = arith.muli %13, %c-1_39 : index
                    %57 = arith.addi %56, %11 : index
                    %c-1_40 = arith.constant -1 : index
                    %58 = arith.muli %11, %c-1_40 : index
                    %59 = arith.addi %58, %arg13 : index
                    %60 = memref.load %arg5[%57, %59] : memref<?x30xf64>
                    %c-1_41 = arith.constant -1 : index
                    %61 = arith.muli %13, %c-1_41 : index
                    %62 = arith.addi %61, %11 : index
                    %c-1_42 = arith.constant -1 : index
                    %63 = arith.muli %11, %c-1_42 : index
                    %64 = arith.addi %63, %arg13 : index
                    %c-1_43 = arith.constant -1 : index
                    %65 = arith.addi %64, %c-1_43 : index
                    %66 = memref.load %arg5[%62, %65] : memref<?x30xf64>
                    %67 = arith.subf %60, %66 : f64
                    %68 = arith.mulf %67, %cst_0 : f64
                    %69 = arith.subf %55, %68 : f64
                    %c-1_44 = arith.constant -1 : index
                    %70 = arith.muli %13, %c-1_44 : index
                    %71 = arith.addi %70, %11 : index
                    %c-1_45 = arith.constant -1 : index
                    %72 = arith.muli %11, %c-1_45 : index
                    %73 = arith.addi %72, %arg13 : index
                    memref.store %69, %arg3[%71, %73] : memref<?x30xf64>
                    %c-1_46 = arith.constant -1 : index
                    %74 = arith.muli %13, %c-1_46 : index
                    %75 = arith.addi %74, %11 : index
                    %c-1_47 = arith.constant -1 : index
                    %76 = arith.addi %75, %c-1_47 : index
                    %c-1_48 = arith.constant -1 : index
                    %77 = arith.muli %11, %c-1_48 : index
                    %78 = arith.addi %77, %arg13 : index
                    %c-1_49 = arith.constant -1 : index
                    %79 = arith.addi %78, %c-1_49 : index
                    %80 = memref.load %arg5[%76, %79] : memref<?x30xf64>
                    %c-1_50 = arith.constant -1 : index
                    %81 = arith.muli %13, %c-1_50 : index
                    %82 = arith.addi %81, %11 : index
                    %c-1_51 = arith.constant -1 : index
                    %83 = arith.addi %82, %c-1_51 : index
                    %c-1_52 = arith.constant -1 : index
                    %84 = arith.muli %11, %c-1_52 : index
                    %85 = arith.addi %84, %arg13 : index
                    %86 = memref.load %arg3[%83, %85] : memref<?x30xf64>
                    %c-1_53 = arith.constant -1 : index
                    %87 = arith.muli %13, %c-1_53 : index
                    %88 = arith.addi %87, %11 : index
                    %c-1_54 = arith.constant -1 : index
                    %89 = arith.addi %88, %c-1_54 : index
                    %c-1_55 = arith.constant -1 : index
                    %90 = arith.muli %11, %c-1_55 : index
                    %91 = arith.addi %90, %arg13 : index
                    %c-1_56 = arith.constant -1 : index
                    %92 = arith.addi %91, %c-1_56 : index
                    %93 = memref.load %arg3[%89, %92] : memref<?x30xf64>
                    %94 = arith.subf %86, %93 : f64
                    %c-1_57 = arith.constant -1 : index
                    %95 = arith.muli %13, %c-1_57 : index
                    %96 = arith.addi %95, %11 : index
                    %c-1_58 = arith.constant -1 : index
                    %97 = arith.muli %11, %c-1_58 : index
                    %98 = arith.addi %97, %arg13 : index
                    %c-1_59 = arith.constant -1 : index
                    %99 = arith.addi %98, %c-1_59 : index
                    %100 = memref.load %arg4[%96, %99] : memref<?x30xf64>
                    %101 = arith.addf %94, %100 : f64
                    %c-1_60 = arith.constant -1 : index
                    %102 = arith.muli %13, %c-1_60 : index
                    %103 = arith.addi %102, %11 : index
                    %c-1_61 = arith.constant -1 : index
                    %104 = arith.addi %103, %c-1_61 : index
                    %c-1_62 = arith.constant -1 : index
                    %105 = arith.muli %11, %c-1_62 : index
                    %106 = arith.addi %105, %arg13 : index
                    %c-1_63 = arith.constant -1 : index
                    %107 = arith.addi %106, %c-1_63 : index
                    %108 = memref.load %arg4[%104, %107] : memref<?x30xf64>
                    %109 = arith.subf %101, %108 : f64
                    %110 = arith.mulf %109, %cst : f64
                    %111 = arith.subf %80, %110 : f64
                    %c-1_64 = arith.constant -1 : index
                    %112 = arith.muli %13, %c-1_64 : index
                    %113 = arith.addi %112, %11 : index
                    %c-1_65 = arith.constant -1 : index
                    %114 = arith.addi %113, %c-1_65 : index
                    %c-1_66 = arith.constant -1 : index
                    %115 = arith.muli %11, %c-1_66 : index
                    %116 = arith.addi %115, %arg13 : index
                    %c-1_67 = arith.constant -1 : index
                    %117 = arith.addi %116, %c-1_67 : index
                    memref.store %111, %arg5[%114, %117] : memref<?x30xf64>
                  }
                }
              }
            }
          }
        }
      }
    }
    return
  }
}

