module {
  func.func @kernel_heat_3d(%arg0: i32, %arg1: i32, %arg2: memref<?x10x10xf64>, %arg3: memref<?x10x10xf64>) {
    %c-31 = arith.constant -31 : index
    %c-30 = arith.constant -30 : index
    %c-29 = arith.constant -29 : index
    %c39 = arith.constant 39 : index
    %c31 = arith.constant 31 : index
    %c10 = arith.constant 10 : index
    %c7 = arith.constant 7 : index
    %c8 = arith.constant 8 : index
    %c-11 = arith.constant -11 : index
    %c-2 = arith.constant -2 : index
    %c9 = arith.constant 9 : index
    %c1024 = arith.constant 1024 : index
    %c-32 = arith.constant -32 : index
    %c-1 = arith.constant -1 : index
    %c15 = arith.constant 15 : index
    %c21 = arith.constant 21 : index
    %c-4 = arith.constant -4 : index
    %c512 = arith.constant 512 : index
    %c16 = arith.constant 16 : index
    %c2 = arith.constant 2 : index
    %c32 = arith.constant 32 : index
    %cst = arith.constant 2.000000e+00 : f64
    %cst_0 = arith.constant 1.250000e-01 : f64
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    scf.for %arg4 = %c0 to %c1 step %c1 {
      scf.for %arg5 = %c0 to %c1 step %c1 {
        scf.for %arg6 = %c0 to %c1 step %c1 {
          scf.for %arg7 = %c0 to %c2 step %c1 {
            scf.for %arg8 = %c0 to %c2 step %c1 {
              scf.for %arg9 = %c0 to %c2 step %c1 {
                %0 = arith.muli %arg7, %c16 : index
                %1 = arith.muli %arg4, %c512 : index
                %2 = arith.addi %0, %1 : index
                %3 = arith.addi %2, %c-4 : index
                %4 = arith.muli %arg8, %c16 : index
                %5 = arith.muli %arg5, %c512 : index
                %6 = arith.addi %4, %5 : index
                %7 = arith.addi %6, %c-4 : index
                %8 = arith.muli %arg9, %c16 : index
                %9 = arith.muli %arg6, %c512 : index
                %10 = arith.addi %8, %9 : index
                %11 = arith.addi %10, %c-4 : index
                %12 = arith.maxsi %3, %c1 : index
                %13 = arith.maxsi %12, %7 : index
                %14 = arith.maxsi %13, %11 : index
                %15 = arith.muli %arg7, %c16 : index
                %16 = arith.muli %arg4, %c512 : index
                %17 = arith.addi %15, %16 : index
                %18 = arith.addi %17, %c15 : index
                %19 = arith.muli %arg8, %c16 : index
                %20 = arith.muli %arg5, %c512 : index
                %21 = arith.addi %19, %20 : index
                %22 = arith.addi %21, %c15 : index
                %23 = arith.muli %arg9, %c16 : index
                %24 = arith.muli %arg6, %c512 : index
                %25 = arith.addi %23, %24 : index
                %26 = arith.addi %25, %c15 : index
                %27 = arith.minsi %18, %c21 : index
                %28 = arith.minsi %27, %22 : index
                %29 = arith.minsi %28, %26 : index
                scf.for %arg10 = %14 to %29 step %c1 {
                  %43 = arith.muli %arg7, %c-1 : index
                  %44 = arith.muli %arg4, %c-32 : index
                  %45 = arith.addi %43, %44 : index
                  %46 = arith.cmpi slt, %arg10, %c0 : index
                  %47 = arith.subi %c-1, %arg10 : index
                  %48 = arith.select %46, %47, %arg10 : index
                  %49 = arith.divsi %48, %c16 : index
                  %50 = arith.subi %c-1, %49 : index
                  %51 = arith.select %46, %50, %49 : index
                  %52 = arith.addi %45, %51 : index
                  %53 = arith.cmpi sge, %52, %c0 : index
                  scf.if %53 {
                    %81 = arith.muli %arg8, %c32 : index
                    %82 = arith.muli %arg5, %c1024 : index
                    %83 = arith.addi %81, %82 : index
                    %84 = arith.muli %arg10, %c2 : index
                    %85 = arith.addi %84, %c1 : index
                    %86 = arith.maxsi %83, %85 : index
                    %87 = arith.muli %arg8, %c32 : index
                    %88 = arith.muli %arg5, %c1024 : index
                    %89 = arith.addi %87, %88 : index
                    %90 = arith.addi %89, %c32 : index
                    %91 = arith.muli %arg10, %c2 : index
                    %92 = arith.addi %91, %c9 : index
                    %93 = arith.minsi %90, %92 : index
                    scf.for %arg11 = %86 to %93 step %c1 {
                      %94 = arith.muli %arg9, %c32 : index
                      %95 = arith.muli %arg6, %c1024 : index
                      %96 = arith.addi %94, %95 : index
                      %97 = arith.muli %arg10, %c2 : index
                      %98 = arith.addi %97, %c1 : index
                      %99 = arith.maxsi %96, %98 : index
                      %100 = arith.muli %arg9, %c32 : index
                      %101 = arith.muli %arg6, %c1024 : index
                      %102 = arith.addi %100, %101 : index
                      %103 = arith.addi %102, %c32 : index
                      %104 = arith.muli %arg10, %c2 : index
                      %105 = arith.addi %104, %c9 : index
                      %106 = arith.minsi %103, %105 : index
                      scf.for %arg12 = %99 to %106 step %c1 {
                        %107 = arith.muli %arg10, %c-2 : index
                        %108 = arith.addi %107, %arg11 : index
                        %109 = arith.muli %arg10, %c-2 : index
                        %110 = arith.addi %109, %arg12 : index
                        %111 = memref.load %arg2[%c2, %108, %110] : memref<?x10x10xf64>
                        %112 = arith.muli %arg10, %c-2 : index
                        %113 = arith.addi %112, %arg11 : index
                        %114 = arith.muli %arg10, %c-2 : index
                        %115 = arith.addi %114, %arg12 : index
                        %116 = memref.load %arg2[%c0, %113, %115] : memref<?x10x10xf64>
                        %117 = arith.muli %arg10, %c-2 : index
                        %118 = arith.addi %117, %arg11 : index
                        %119 = arith.addi %118, %c1 : index
                        %120 = arith.muli %arg10, %c-2 : index
                        %121 = arith.addi %120, %arg12 : index
                        %122 = memref.load %arg2[%c1, %119, %121] : memref<?x10x10xf64>
                        %123 = arith.muli %arg10, %c-2 : index
                        %124 = arith.addi %123, %arg11 : index
                        %125 = arith.addi %124, %c-1 : index
                        %126 = arith.muli %arg10, %c-2 : index
                        %127 = arith.addi %126, %arg12 : index
                        %128 = memref.load %arg2[%c1, %125, %127] : memref<?x10x10xf64>
                        %129 = arith.muli %arg10, %c-2 : index
                        %130 = arith.addi %129, %arg11 : index
                        %131 = arith.muli %arg10, %c-2 : index
                        %132 = arith.addi %131, %arg12 : index
                        %133 = arith.addi %132, %c1 : index
                        %134 = memref.load %arg2[%c1, %130, %133] : memref<?x10x10xf64>
                        %135 = arith.muli %arg10, %c-2 : index
                        %136 = arith.addi %135, %arg11 : index
                        %137 = arith.muli %arg10, %c-2 : index
                        %138 = arith.addi %137, %arg12 : index
                        %139 = arith.addi %138, %c-1 : index
                        %140 = memref.load %arg2[%c1, %136, %139] : memref<?x10x10xf64>
                        %141 = arith.muli %arg10, %c-2 : index
                        %142 = arith.addi %141, %arg11 : index
                        %143 = arith.muli %arg10, %c-2 : index
                        %144 = arith.addi %143, %arg12 : index
                        %145 = memref.load %arg2[%c1, %142, %144] : memref<?x10x10xf64>
                        %146 = arith.mulf %145, %cst : f64
                        %147 = arith.subf %111, %146 : f64
                        %148 = arith.addf %147, %116 : f64
                        %149 = arith.mulf %148, %cst_0 : f64
                        %150 = arith.subf %122, %146 : f64
                        %151 = arith.addf %150, %128 : f64
                        %152 = arith.mulf %151, %cst_0 : f64
                        %153 = arith.addf %149, %152 : f64
                        %154 = arith.subf %134, %146 : f64
                        %155 = arith.addf %154, %140 : f64
                        %156 = arith.mulf %155, %cst_0 : f64
                        %157 = arith.addf %153, %156 : f64
                        %158 = arith.addf %157, %145 : f64
                        %159 = arith.muli %arg10, %c-2 : index
                        %160 = arith.addi %159, %arg11 : index
                        %161 = arith.muli %arg10, %c-2 : index
                        %162 = arith.addi %161, %arg12 : index
                        memref.store %158, %arg3[%c1, %160, %162] : memref<?x10x10xf64>
                      }
                    }
                  }
                  %54 = arith.muli %arg7, %c32 : index
                  %55 = arith.muli %arg4, %c1024 : index
                  %56 = arith.addi %54, %55 : index
                  %57 = arith.muli %arg10, %c2 : index
                  %58 = arith.addi %57, %c2 : index
                  %59 = arith.maxsi %56, %58 : index
                  %60 = arith.muli %arg7, %c32 : index
                  %61 = arith.muli %arg4, %c1024 : index
                  %62 = arith.addi %60, %61 : index
                  %63 = arith.addi %62, %c32 : index
                  %64 = arith.muli %arg10, %c2 : index
                  %65 = arith.addi %64, %c9 : index
                  %66 = arith.minsi %63, %65 : index
                  scf.for %arg11 = %59 to %66 step %c1 {
                    %81 = arith.muli %arg8, %c-1 : index
                    %82 = arith.muli %arg5, %c-32 : index
                    %83 = arith.addi %81, %82 : index
                    %84 = arith.cmpi slt, %arg10, %c0 : index
                    %85 = arith.subi %c-1, %arg10 : index
                    %86 = arith.select %84, %85, %arg10 : index
                    %87 = arith.divsi %86, %c16 : index
                    %88 = arith.subi %c-1, %87 : index
                    %89 = arith.select %84, %88, %87 : index
                    %90 = arith.addi %83, %89 : index
                    %91 = arith.cmpi sge, %90, %c0 : index
                    scf.if %91 {
                      %119 = arith.muli %arg9, %c32 : index
                      %120 = arith.muli %arg6, %c1024 : index
                      %121 = arith.addi %119, %120 : index
                      %122 = arith.muli %arg10, %c2 : index
                      %123 = arith.addi %122, %c1 : index
                      %124 = arith.maxsi %121, %123 : index
                      %125 = arith.muli %arg9, %c32 : index
                      %126 = arith.muli %arg6, %c1024 : index
                      %127 = arith.addi %125, %126 : index
                      %128 = arith.addi %127, %c32 : index
                      %129 = arith.muli %arg10, %c2 : index
                      %130 = arith.addi %129, %c9 : index
                      %131 = arith.minsi %128, %130 : index
                      scf.for %arg12 = %124 to %131 step %c1 {
                        %132 = arith.muli %arg10, %c-2 : index
                        %133 = arith.addi %132, %arg11 : index
                        %134 = arith.addi %133, %c1 : index
                        %135 = arith.muli %arg10, %c-2 : index
                        %136 = arith.addi %135, %arg12 : index
                        %137 = memref.load %arg2[%134, %c1, %136] : memref<?x10x10xf64>
                        %138 = arith.muli %arg10, %c-2 : index
                        %139 = arith.addi %138, %arg11 : index
                        %140 = arith.addi %139, %c-1 : index
                        %141 = arith.muli %arg10, %c-2 : index
                        %142 = arith.addi %141, %arg12 : index
                        %143 = memref.load %arg2[%140, %c1, %142] : memref<?x10x10xf64>
                        %144 = arith.muli %arg10, %c-2 : index
                        %145 = arith.addi %144, %arg11 : index
                        %146 = arith.muli %arg10, %c-2 : index
                        %147 = arith.addi %146, %arg12 : index
                        %148 = memref.load %arg2[%145, %c2, %147] : memref<?x10x10xf64>
                        %149 = arith.muli %arg10, %c-2 : index
                        %150 = arith.addi %149, %arg11 : index
                        %151 = arith.muli %arg10, %c-2 : index
                        %152 = arith.addi %151, %arg12 : index
                        %153 = memref.load %arg2[%150, %c0, %152] : memref<?x10x10xf64>
                        %154 = arith.muli %arg10, %c-2 : index
                        %155 = arith.addi %154, %arg11 : index
                        %156 = arith.muli %arg10, %c-2 : index
                        %157 = arith.addi %156, %arg12 : index
                        %158 = arith.addi %157, %c1 : index
                        %159 = memref.load %arg2[%155, %c1, %158] : memref<?x10x10xf64>
                        %160 = arith.muli %arg10, %c-2 : index
                        %161 = arith.addi %160, %arg11 : index
                        %162 = arith.muli %arg10, %c-2 : index
                        %163 = arith.addi %162, %arg12 : index
                        %164 = arith.addi %163, %c-1 : index
                        %165 = memref.load %arg2[%161, %c1, %164] : memref<?x10x10xf64>
                        %166 = arith.muli %arg10, %c-2 : index
                        %167 = arith.addi %166, %arg11 : index
                        %168 = arith.muli %arg10, %c-2 : index
                        %169 = arith.addi %168, %arg12 : index
                        %170 = memref.load %arg2[%167, %c1, %169] : memref<?x10x10xf64>
                        %171 = arith.mulf %170, %cst : f64
                        %172 = arith.subf %137, %171 : f64
                        %173 = arith.addf %172, %143 : f64
                        %174 = arith.mulf %173, %cst_0 : f64
                        %175 = arith.subf %148, %171 : f64
                        %176 = arith.addf %175, %153 : f64
                        %177 = arith.mulf %176, %cst_0 : f64
                        %178 = arith.addf %174, %177 : f64
                        %179 = arith.subf %159, %171 : f64
                        %180 = arith.addf %179, %165 : f64
                        %181 = arith.mulf %180, %cst_0 : f64
                        %182 = arith.addf %178, %181 : f64
                        %183 = arith.addf %182, %170 : f64
                        %184 = arith.muli %arg10, %c-2 : index
                        %185 = arith.addi %184, %arg11 : index
                        %186 = arith.muli %arg10, %c-2 : index
                        %187 = arith.addi %186, %arg12 : index
                        memref.store %183, %arg3[%185, %c1, %187] : memref<?x10x10xf64>
                      }
                    }
                    %92 = arith.muli %arg8, %c32 : index
                    %93 = arith.muli %arg5, %c1024 : index
                    %94 = arith.addi %92, %93 : index
                    %95 = arith.muli %arg10, %c2 : index
                    %96 = arith.addi %95, %c2 : index
                    %97 = arith.maxsi %94, %96 : index
                    %98 = arith.muli %arg8, %c32 : index
                    %99 = arith.muli %arg5, %c1024 : index
                    %100 = arith.addi %98, %99 : index
                    %101 = arith.addi %100, %c32 : index
                    %102 = arith.muli %arg10, %c2 : index
                    %103 = arith.addi %102, %c9 : index
                    %104 = arith.minsi %101, %103 : index
                    scf.for %arg12 = %97 to %104 step %c1 {
                      %119 = arith.muli %arg9, %c-1 : index
                      %120 = arith.muli %arg6, %c-32 : index
                      %121 = arith.addi %119, %120 : index
                      %122 = arith.cmpi slt, %arg10, %c0 : index
                      %123 = arith.subi %c-1, %arg10 : index
                      %124 = arith.select %122, %123, %arg10 : index
                      %125 = arith.divsi %124, %c16 : index
                      %126 = arith.subi %c-1, %125 : index
                      %127 = arith.select %122, %126, %125 : index
                      %128 = arith.addi %121, %127 : index
                      %129 = arith.cmpi sge, %128, %c0 : index
                      scf.if %129 {
                        %157 = arith.muli %arg10, %c-2 : index
                        %158 = arith.addi %157, %arg11 : index
                        %159 = arith.addi %158, %c1 : index
                        %160 = arith.muli %arg10, %c-2 : index
                        %161 = arith.addi %160, %arg12 : index
                        %162 = memref.load %arg2[%159, %161, %c1] : memref<?x10x10xf64>
                        %163 = arith.muli %arg10, %c-2 : index
                        %164 = arith.addi %163, %arg11 : index
                        %165 = arith.addi %164, %c-1 : index
                        %166 = arith.muli %arg10, %c-2 : index
                        %167 = arith.addi %166, %arg12 : index
                        %168 = memref.load %arg2[%165, %167, %c1] : memref<?x10x10xf64>
                        %169 = arith.muli %arg10, %c-2 : index
                        %170 = arith.addi %169, %arg11 : index
                        %171 = arith.muli %arg10, %c-2 : index
                        %172 = arith.addi %171, %arg12 : index
                        %173 = arith.addi %172, %c1 : index
                        %174 = memref.load %arg2[%170, %173, %c1] : memref<?x10x10xf64>
                        %175 = arith.muli %arg10, %c-2 : index
                        %176 = arith.addi %175, %arg11 : index
                        %177 = arith.muli %arg10, %c-2 : index
                        %178 = arith.addi %177, %arg12 : index
                        %179 = arith.addi %178, %c-1 : index
                        %180 = memref.load %arg2[%176, %179, %c1] : memref<?x10x10xf64>
                        %181 = arith.muli %arg10, %c-2 : index
                        %182 = arith.addi %181, %arg11 : index
                        %183 = arith.muli %arg10, %c-2 : index
                        %184 = arith.addi %183, %arg12 : index
                        %185 = memref.load %arg2[%182, %184, %c2] : memref<?x10x10xf64>
                        %186 = arith.muli %arg10, %c-2 : index
                        %187 = arith.addi %186, %arg11 : index
                        %188 = arith.muli %arg10, %c-2 : index
                        %189 = arith.addi %188, %arg12 : index
                        %190 = memref.load %arg2[%187, %189, %c0] : memref<?x10x10xf64>
                        %191 = arith.muli %arg10, %c-2 : index
                        %192 = arith.addi %191, %arg11 : index
                        %193 = arith.muli %arg10, %c-2 : index
                        %194 = arith.addi %193, %arg12 : index
                        %195 = memref.load %arg2[%192, %194, %c1] : memref<?x10x10xf64>
                        %196 = arith.mulf %195, %cst : f64
                        %197 = arith.subf %162, %196 : f64
                        %198 = arith.addf %197, %168 : f64
                        %199 = arith.mulf %198, %cst_0 : f64
                        %200 = arith.subf %174, %196 : f64
                        %201 = arith.addf %200, %180 : f64
                        %202 = arith.mulf %201, %cst_0 : f64
                        %203 = arith.addf %199, %202 : f64
                        %204 = arith.subf %185, %196 : f64
                        %205 = arith.addf %204, %190 : f64
                        %206 = arith.mulf %205, %cst_0 : f64
                        %207 = arith.addf %203, %206 : f64
                        %208 = arith.addf %207, %195 : f64
                        %209 = arith.muli %arg10, %c-2 : index
                        %210 = arith.addi %209, %arg11 : index
                        %211 = arith.muli %arg10, %c-2 : index
                        %212 = arith.addi %211, %arg12 : index
                        memref.store %208, %arg3[%210, %212, %c1] : memref<?x10x10xf64>
                      }
                      %130 = arith.muli %arg9, %c32 : index
                      %131 = arith.muli %arg6, %c1024 : index
                      %132 = arith.addi %130, %131 : index
                      %133 = arith.muli %arg10, %c2 : index
                      %134 = arith.addi %133, %c2 : index
                      %135 = arith.maxsi %132, %134 : index
                      %136 = arith.muli %arg9, %c32 : index
                      %137 = arith.muli %arg6, %c1024 : index
                      %138 = arith.addi %136, %137 : index
                      %139 = arith.addi %138, %c32 : index
                      %140 = arith.muli %arg10, %c2 : index
                      %141 = arith.addi %140, %c9 : index
                      %142 = arith.minsi %139, %141 : index
                      scf.for %arg13 = %135 to %142 step %c1 {
                        %157 = arith.muli %arg10, %c-2 : index
                        %158 = arith.addi %157, %arg11 : index
                        %159 = arith.addi %158, %c1 : index
                        %160 = arith.muli %arg10, %c-2 : index
                        %161 = arith.addi %160, %arg12 : index
                        %162 = arith.muli %arg10, %c-2 : index
                        %163 = arith.addi %162, %arg13 : index
                        %164 = memref.load %arg2[%159, %161, %163] : memref<?x10x10xf64>
                        %165 = arith.muli %arg10, %c-2 : index
                        %166 = arith.addi %165, %arg11 : index
                        %167 = arith.addi %166, %c-1 : index
                        %168 = arith.muli %arg10, %c-2 : index
                        %169 = arith.addi %168, %arg12 : index
                        %170 = arith.muli %arg10, %c-2 : index
                        %171 = arith.addi %170, %arg13 : index
                        %172 = memref.load %arg2[%167, %169, %171] : memref<?x10x10xf64>
                        %173 = arith.muli %arg10, %c-2 : index
                        %174 = arith.addi %173, %arg11 : index
                        %175 = arith.muli %arg10, %c-2 : index
                        %176 = arith.addi %175, %arg12 : index
                        %177 = arith.addi %176, %c1 : index
                        %178 = arith.muli %arg10, %c-2 : index
                        %179 = arith.addi %178, %arg13 : index
                        %180 = memref.load %arg2[%174, %177, %179] : memref<?x10x10xf64>
                        %181 = arith.muli %arg10, %c-2 : index
                        %182 = arith.addi %181, %arg11 : index
                        %183 = arith.muli %arg10, %c-2 : index
                        %184 = arith.addi %183, %arg12 : index
                        %185 = arith.addi %184, %c-1 : index
                        %186 = arith.muli %arg10, %c-2 : index
                        %187 = arith.addi %186, %arg13 : index
                        %188 = memref.load %arg2[%182, %185, %187] : memref<?x10x10xf64>
                        %189 = arith.muli %arg10, %c-2 : index
                        %190 = arith.addi %189, %arg11 : index
                        %191 = arith.muli %arg10, %c-2 : index
                        %192 = arith.addi %191, %arg12 : index
                        %193 = arith.muli %arg10, %c-2 : index
                        %194 = arith.addi %193, %arg13 : index
                        %195 = arith.addi %194, %c1 : index
                        %196 = memref.load %arg2[%190, %192, %195] : memref<?x10x10xf64>
                        %197 = arith.muli %arg10, %c-2 : index
                        %198 = arith.addi %197, %arg11 : index
                        %199 = arith.muli %arg10, %c-2 : index
                        %200 = arith.addi %199, %arg12 : index
                        %201 = arith.muli %arg10, %c-2 : index
                        %202 = arith.addi %201, %arg13 : index
                        %203 = arith.addi %202, %c-1 : index
                        %204 = memref.load %arg2[%198, %200, %203] : memref<?x10x10xf64>
                        %205 = arith.muli %arg10, %c-2 : index
                        %206 = arith.addi %205, %arg11 : index
                        %207 = arith.muli %arg10, %c-2 : index
                        %208 = arith.addi %207, %arg12 : index
                        %209 = arith.muli %arg10, %c-2 : index
                        %210 = arith.addi %209, %arg13 : index
                        %211 = memref.load %arg2[%206, %208, %210] : memref<?x10x10xf64>
                        %212 = arith.mulf %211, %cst : f64
                        %213 = arith.subf %164, %212 : f64
                        %214 = arith.addf %213, %172 : f64
                        %215 = arith.mulf %214, %cst_0 : f64
                        %216 = arith.subf %180, %212 : f64
                        %217 = arith.addf %216, %188 : f64
                        %218 = arith.mulf %217, %cst_0 : f64
                        %219 = arith.addf %215, %218 : f64
                        %220 = arith.subf %196, %212 : f64
                        %221 = arith.addf %220, %204 : f64
                        %222 = arith.mulf %221, %cst_0 : f64
                        %223 = arith.addf %219, %222 : f64
                        %224 = arith.addf %223, %211 : f64
                        %225 = arith.muli %arg10, %c-2 : index
                        %226 = arith.addi %225, %arg11 : index
                        %227 = arith.muli %arg10, %c-2 : index
                        %228 = arith.addi %227, %arg12 : index
                        %229 = arith.muli %arg10, %c-2 : index
                        %230 = arith.addi %229, %arg13 : index
                        memref.store %224, %arg3[%226, %228, %230] : memref<?x10x10xf64>
                        %231 = arith.muli %arg10, %c-2 : index
                        %232 = arith.addi %231, %arg11 : index
                        %233 = arith.muli %arg10, %c-2 : index
                        %234 = arith.addi %233, %arg12 : index
                        %235 = arith.addi %234, %c-1 : index
                        %236 = arith.muli %arg10, %c-2 : index
                        %237 = arith.addi %236, %arg13 : index
                        %238 = arith.addi %237, %c-1 : index
                        %239 = memref.load %arg3[%232, %235, %238] : memref<?x10x10xf64>
                        %240 = arith.muli %arg10, %c-2 : index
                        %241 = arith.addi %240, %arg11 : index
                        %242 = arith.addi %241, %c-2 : index
                        %243 = arith.muli %arg10, %c-2 : index
                        %244 = arith.addi %243, %arg12 : index
                        %245 = arith.addi %244, %c-1 : index
                        %246 = arith.muli %arg10, %c-2 : index
                        %247 = arith.addi %246, %arg13 : index
                        %248 = arith.addi %247, %c-1 : index
                        %249 = memref.load %arg3[%242, %245, %248] : memref<?x10x10xf64>
                        %250 = arith.muli %arg10, %c-2 : index
                        %251 = arith.addi %250, %arg11 : index
                        %252 = arith.addi %251, %c-1 : index
                        %253 = arith.muli %arg10, %c-2 : index
                        %254 = arith.addi %253, %arg12 : index
                        %255 = arith.muli %arg10, %c-2 : index
                        %256 = arith.addi %255, %arg13 : index
                        %257 = arith.addi %256, %c-1 : index
                        %258 = memref.load %arg3[%252, %254, %257] : memref<?x10x10xf64>
                        %259 = arith.muli %arg10, %c-2 : index
                        %260 = arith.addi %259, %arg11 : index
                        %261 = arith.addi %260, %c-1 : index
                        %262 = arith.muli %arg10, %c-2 : index
                        %263 = arith.addi %262, %arg12 : index
                        %264 = arith.addi %263, %c-2 : index
                        %265 = arith.muli %arg10, %c-2 : index
                        %266 = arith.addi %265, %arg13 : index
                        %267 = arith.addi %266, %c-1 : index
                        %268 = memref.load %arg3[%261, %264, %267] : memref<?x10x10xf64>
                        %269 = arith.muli %arg10, %c-2 : index
                        %270 = arith.addi %269, %arg11 : index
                        %271 = arith.addi %270, %c-1 : index
                        %272 = arith.muli %arg10, %c-2 : index
                        %273 = arith.addi %272, %arg12 : index
                        %274 = arith.addi %273, %c-1 : index
                        %275 = arith.muli %arg10, %c-2 : index
                        %276 = arith.addi %275, %arg13 : index
                        %277 = memref.load %arg3[%271, %274, %276] : memref<?x10x10xf64>
                        %278 = arith.muli %arg10, %c-2 : index
                        %279 = arith.addi %278, %arg11 : index
                        %280 = arith.addi %279, %c-1 : index
                        %281 = arith.muli %arg10, %c-2 : index
                        %282 = arith.addi %281, %arg12 : index
                        %283 = arith.addi %282, %c-1 : index
                        %284 = arith.muli %arg10, %c-2 : index
                        %285 = arith.addi %284, %arg13 : index
                        %286 = arith.addi %285, %c-2 : index
                        %287 = memref.load %arg3[%280, %283, %286] : memref<?x10x10xf64>
                        %288 = arith.muli %arg10, %c-2 : index
                        %289 = arith.addi %288, %arg11 : index
                        %290 = arith.addi %289, %c-1 : index
                        %291 = arith.muli %arg10, %c-2 : index
                        %292 = arith.addi %291, %arg12 : index
                        %293 = arith.addi %292, %c-1 : index
                        %294 = arith.muli %arg10, %c-2 : index
                        %295 = arith.addi %294, %arg13 : index
                        %296 = arith.addi %295, %c-1 : index
                        %297 = memref.load %arg3[%290, %293, %296] : memref<?x10x10xf64>
                        %298 = arith.mulf %297, %cst : f64
                        %299 = arith.subf %239, %298 : f64
                        %300 = arith.addf %299, %249 : f64
                        %301 = arith.mulf %300, %cst_0 : f64
                        %302 = arith.subf %258, %298 : f64
                        %303 = arith.addf %302, %268 : f64
                        %304 = arith.mulf %303, %cst_0 : f64
                        %305 = arith.addf %301, %304 : f64
                        %306 = arith.subf %277, %298 : f64
                        %307 = arith.addf %306, %287 : f64
                        %308 = arith.mulf %307, %cst_0 : f64
                        %309 = arith.addf %305, %308 : f64
                        %310 = arith.addf %309, %297 : f64
                        %311 = arith.muli %arg10, %c-2 : index
                        %312 = arith.addi %311, %arg11 : index
                        %313 = arith.addi %312, %c-1 : index
                        %314 = arith.muli %arg10, %c-2 : index
                        %315 = arith.addi %314, %arg12 : index
                        %316 = arith.addi %315, %c-1 : index
                        %317 = arith.muli %arg10, %c-2 : index
                        %318 = arith.addi %317, %arg13 : index
                        %319 = arith.addi %318, %c-1 : index
                        memref.store %310, %arg2[%313, %316, %319] : memref<?x10x10xf64>
                      }
                      %143 = arith.muli %arg6, %c32 : index
                      %144 = arith.addi %arg9, %143 : index
                      %145 = arith.addi %arg10, %c-11 : index
                      %146 = arith.cmpi sle, %145, %c0 : index
                      %147 = arith.subi %c0, %145 : index
                      %148 = arith.subi %145, %c1 : index
                      %149 = arith.select %146, %147, %148 : index
                      %150 = arith.divsi %149, %c16 : index
                      %151 = arith.subi %c0, %150 : index
                      %152 = arith.addi %150, %c1 : index
                      %153 = arith.select %146, %151, %152 : index
                      %154 = arith.muli %153, %c-1 : index
                      %155 = arith.addi %144, %154 : index
                      %156 = arith.cmpi sge, %155, %c0 : index
                      scf.if %156 {
                        %157 = arith.muli %arg10, %c-2 : index
                        %158 = arith.addi %157, %arg11 : index
                        %159 = arith.muli %arg10, %c-2 : index
                        %160 = arith.addi %159, %arg12 : index
                        %161 = arith.addi %160, %c-1 : index
                        %162 = memref.load %arg3[%158, %161, %c8] : memref<?x10x10xf64>
                        %163 = arith.muli %arg10, %c-2 : index
                        %164 = arith.addi %163, %arg11 : index
                        %165 = arith.addi %164, %c-2 : index
                        %166 = arith.muli %arg10, %c-2 : index
                        %167 = arith.addi %166, %arg12 : index
                        %168 = arith.addi %167, %c-1 : index
                        %169 = memref.load %arg3[%165, %168, %c8] : memref<?x10x10xf64>
                        %170 = arith.muli %arg10, %c-2 : index
                        %171 = arith.addi %170, %arg11 : index
                        %172 = arith.addi %171, %c-1 : index
                        %173 = arith.muli %arg10, %c-2 : index
                        %174 = arith.addi %173, %arg12 : index
                        %175 = memref.load %arg3[%172, %174, %c8] : memref<?x10x10xf64>
                        %176 = arith.muli %arg10, %c-2 : index
                        %177 = arith.addi %176, %arg11 : index
                        %178 = arith.addi %177, %c-1 : index
                        %179 = arith.muli %arg10, %c-2 : index
                        %180 = arith.addi %179, %arg12 : index
                        %181 = arith.addi %180, %c-2 : index
                        %182 = memref.load %arg3[%178, %181, %c8] : memref<?x10x10xf64>
                        %183 = arith.muli %arg10, %c-2 : index
                        %184 = arith.addi %183, %arg11 : index
                        %185 = arith.addi %184, %c-1 : index
                        %186 = arith.muli %arg10, %c-2 : index
                        %187 = arith.addi %186, %arg12 : index
                        %188 = arith.addi %187, %c-1 : index
                        %189 = memref.load %arg3[%185, %188, %c9] : memref<?x10x10xf64>
                        %190 = arith.muli %arg10, %c-2 : index
                        %191 = arith.addi %190, %arg11 : index
                        %192 = arith.addi %191, %c-1 : index
                        %193 = arith.muli %arg10, %c-2 : index
                        %194 = arith.addi %193, %arg12 : index
                        %195 = arith.addi %194, %c-1 : index
                        %196 = memref.load %arg3[%192, %195, %c7] : memref<?x10x10xf64>
                        %197 = arith.muli %arg10, %c-2 : index
                        %198 = arith.addi %197, %arg11 : index
                        %199 = arith.addi %198, %c-1 : index
                        %200 = arith.muli %arg10, %c-2 : index
                        %201 = arith.addi %200, %arg12 : index
                        %202 = arith.addi %201, %c-1 : index
                        %203 = memref.load %arg3[%199, %202, %c8] : memref<?x10x10xf64>
                        %204 = arith.mulf %203, %cst : f64
                        %205 = arith.subf %162, %204 : f64
                        %206 = arith.addf %205, %169 : f64
                        %207 = arith.mulf %206, %cst_0 : f64
                        %208 = arith.subf %175, %204 : f64
                        %209 = arith.addf %208, %182 : f64
                        %210 = arith.mulf %209, %cst_0 : f64
                        %211 = arith.addf %207, %210 : f64
                        %212 = arith.subf %189, %204 : f64
                        %213 = arith.addf %212, %196 : f64
                        %214 = arith.mulf %213, %cst_0 : f64
                        %215 = arith.addf %211, %214 : f64
                        %216 = arith.addf %215, %203 : f64
                        %217 = arith.muli %arg10, %c-2 : index
                        %218 = arith.addi %217, %arg11 : index
                        %219 = arith.addi %218, %c-1 : index
                        %220 = arith.muli %arg10, %c-2 : index
                        %221 = arith.addi %220, %arg12 : index
                        %222 = arith.addi %221, %c-1 : index
                        memref.store %216, %arg2[%219, %222, %c8] : memref<?x10x10xf64>
                      }
                    }
                    %105 = arith.muli %arg5, %c32 : index
                    %106 = arith.addi %arg8, %105 : index
                    %107 = arith.addi %arg10, %c-11 : index
                    %108 = arith.cmpi sle, %107, %c0 : index
                    %109 = arith.subi %c0, %107 : index
                    %110 = arith.subi %107, %c1 : index
                    %111 = arith.select %108, %109, %110 : index
                    %112 = arith.divsi %111, %c16 : index
                    %113 = arith.subi %c0, %112 : index
                    %114 = arith.addi %112, %c1 : index
                    %115 = arith.select %108, %113, %114 : index
                    %116 = arith.muli %115, %c-1 : index
                    %117 = arith.addi %106, %116 : index
                    %118 = arith.cmpi sge, %117, %c0 : index
                    scf.if %118 {
                      %119 = arith.muli %arg9, %c32 : index
                      %120 = arith.muli %arg6, %c1024 : index
                      %121 = arith.addi %119, %120 : index
                      %122 = arith.muli %arg10, %c2 : index
                      %123 = arith.addi %122, %c2 : index
                      %124 = arith.maxsi %121, %123 : index
                      %125 = arith.muli %arg9, %c32 : index
                      %126 = arith.muli %arg6, %c1024 : index
                      %127 = arith.addi %125, %126 : index
                      %128 = arith.addi %127, %c32 : index
                      %129 = arith.muli %arg10, %c2 : index
                      %130 = arith.addi %129, %c10 : index
                      %131 = arith.minsi %128, %130 : index
                      scf.for %arg12 = %124 to %131 step %c1 {
                        %132 = arith.muli %arg10, %c-2 : index
                        %133 = arith.addi %132, %arg11 : index
                        %134 = arith.muli %arg10, %c-2 : index
                        %135 = arith.addi %134, %arg12 : index
                        %136 = arith.addi %135, %c-1 : index
                        %137 = memref.load %arg3[%133, %c8, %136] : memref<?x10x10xf64>
                        %138 = arith.muli %arg10, %c-2 : index
                        %139 = arith.addi %138, %arg11 : index
                        %140 = arith.addi %139, %c-2 : index
                        %141 = arith.muli %arg10, %c-2 : index
                        %142 = arith.addi %141, %arg12 : index
                        %143 = arith.addi %142, %c-1 : index
                        %144 = memref.load %arg3[%140, %c8, %143] : memref<?x10x10xf64>
                        %145 = arith.muli %arg10, %c-2 : index
                        %146 = arith.addi %145, %arg11 : index
                        %147 = arith.addi %146, %c-1 : index
                        %148 = arith.muli %arg10, %c-2 : index
                        %149 = arith.addi %148, %arg12 : index
                        %150 = arith.addi %149, %c-1 : index
                        %151 = memref.load %arg3[%147, %c9, %150] : memref<?x10x10xf64>
                        %152 = arith.muli %arg10, %c-2 : index
                        %153 = arith.addi %152, %arg11 : index
                        %154 = arith.addi %153, %c-1 : index
                        %155 = arith.muli %arg10, %c-2 : index
                        %156 = arith.addi %155, %arg12 : index
                        %157 = arith.addi %156, %c-1 : index
                        %158 = memref.load %arg3[%154, %c7, %157] : memref<?x10x10xf64>
                        %159 = arith.muli %arg10, %c-2 : index
                        %160 = arith.addi %159, %arg11 : index
                        %161 = arith.addi %160, %c-1 : index
                        %162 = arith.muli %arg10, %c-2 : index
                        %163 = arith.addi %162, %arg12 : index
                        %164 = memref.load %arg3[%161, %c8, %163] : memref<?x10x10xf64>
                        %165 = arith.muli %arg10, %c-2 : index
                        %166 = arith.addi %165, %arg11 : index
                        %167 = arith.addi %166, %c-1 : index
                        %168 = arith.muli %arg10, %c-2 : index
                        %169 = arith.addi %168, %arg12 : index
                        %170 = arith.addi %169, %c-2 : index
                        %171 = memref.load %arg3[%167, %c8, %170] : memref<?x10x10xf64>
                        %172 = arith.muli %arg10, %c-2 : index
                        %173 = arith.addi %172, %arg11 : index
                        %174 = arith.addi %173, %c-1 : index
                        %175 = arith.muli %arg10, %c-2 : index
                        %176 = arith.addi %175, %arg12 : index
                        %177 = arith.addi %176, %c-1 : index
                        %178 = memref.load %arg3[%174, %c8, %177] : memref<?x10x10xf64>
                        %179 = arith.mulf %178, %cst : f64
                        %180 = arith.subf %137, %179 : f64
                        %181 = arith.addf %180, %144 : f64
                        %182 = arith.mulf %181, %cst_0 : f64
                        %183 = arith.subf %151, %179 : f64
                        %184 = arith.addf %183, %158 : f64
                        %185 = arith.mulf %184, %cst_0 : f64
                        %186 = arith.addf %182, %185 : f64
                        %187 = arith.subf %164, %179 : f64
                        %188 = arith.addf %187, %171 : f64
                        %189 = arith.mulf %188, %cst_0 : f64
                        %190 = arith.addf %186, %189 : f64
                        %191 = arith.addf %190, %178 : f64
                        %192 = arith.muli %arg10, %c-2 : index
                        %193 = arith.addi %192, %arg11 : index
                        %194 = arith.addi %193, %c-1 : index
                        %195 = arith.muli %arg10, %c-2 : index
                        %196 = arith.addi %195, %arg12 : index
                        %197 = arith.addi %196, %c-1 : index
                        memref.store %191, %arg2[%194, %c8, %197] : memref<?x10x10xf64>
                      }
                    }
                  }
                  %67 = arith.muli %arg4, %c32 : index
                  %68 = arith.addi %arg7, %67 : index
                  %69 = arith.addi %arg10, %c-11 : index
                  %70 = arith.cmpi sle, %69, %c0 : index
                  %71 = arith.subi %c0, %69 : index
                  %72 = arith.subi %69, %c1 : index
                  %73 = arith.select %70, %71, %72 : index
                  %74 = arith.divsi %73, %c16 : index
                  %75 = arith.subi %c0, %74 : index
                  %76 = arith.addi %74, %c1 : index
                  %77 = arith.select %70, %75, %76 : index
                  %78 = arith.muli %77, %c-1 : index
                  %79 = arith.addi %68, %78 : index
                  %80 = arith.cmpi sge, %79, %c0 : index
                  scf.if %80 {
                    %81 = arith.muli %arg8, %c32 : index
                    %82 = arith.muli %arg5, %c1024 : index
                    %83 = arith.addi %81, %82 : index
                    %84 = arith.muli %arg10, %c2 : index
                    %85 = arith.addi %84, %c2 : index
                    %86 = arith.maxsi %83, %85 : index
                    %87 = arith.muli %arg8, %c32 : index
                    %88 = arith.muli %arg5, %c1024 : index
                    %89 = arith.addi %87, %88 : index
                    %90 = arith.addi %89, %c32 : index
                    %91 = arith.muli %arg10, %c2 : index
                    %92 = arith.addi %91, %c10 : index
                    %93 = arith.minsi %90, %92 : index
                    scf.for %arg11 = %86 to %93 step %c1 {
                      %94 = arith.muli %arg9, %c32 : index
                      %95 = arith.muli %arg6, %c1024 : index
                      %96 = arith.addi %94, %95 : index
                      %97 = arith.muli %arg10, %c2 : index
                      %98 = arith.addi %97, %c2 : index
                      %99 = arith.maxsi %96, %98 : index
                      %100 = arith.muli %arg9, %c32 : index
                      %101 = arith.muli %arg6, %c1024 : index
                      %102 = arith.addi %100, %101 : index
                      %103 = arith.addi %102, %c32 : index
                      %104 = arith.muli %arg10, %c2 : index
                      %105 = arith.addi %104, %c10 : index
                      %106 = arith.minsi %103, %105 : index
                      scf.for %arg12 = %99 to %106 step %c1 {
                        %107 = arith.muli %arg10, %c-2 : index
                        %108 = arith.addi %107, %arg11 : index
                        %109 = arith.addi %108, %c-1 : index
                        %110 = arith.muli %arg10, %c-2 : index
                        %111 = arith.addi %110, %arg12 : index
                        %112 = arith.addi %111, %c-1 : index
                        %113 = memref.load %arg3[%c9, %109, %112] : memref<?x10x10xf64>
                        %114 = arith.muli %arg10, %c-2 : index
                        %115 = arith.addi %114, %arg11 : index
                        %116 = arith.addi %115, %c-1 : index
                        %117 = arith.muli %arg10, %c-2 : index
                        %118 = arith.addi %117, %arg12 : index
                        %119 = arith.addi %118, %c-1 : index
                        %120 = memref.load %arg3[%c7, %116, %119] : memref<?x10x10xf64>
                        %121 = arith.muli %arg10, %c-2 : index
                        %122 = arith.addi %121, %arg11 : index
                        %123 = arith.muli %arg10, %c-2 : index
                        %124 = arith.addi %123, %arg12 : index
                        %125 = arith.addi %124, %c-1 : index
                        %126 = memref.load %arg3[%c8, %122, %125] : memref<?x10x10xf64>
                        %127 = arith.muli %arg10, %c-2 : index
                        %128 = arith.addi %127, %arg11 : index
                        %129 = arith.addi %128, %c-2 : index
                        %130 = arith.muli %arg10, %c-2 : index
                        %131 = arith.addi %130, %arg12 : index
                        %132 = arith.addi %131, %c-1 : index
                        %133 = memref.load %arg3[%c8, %129, %132] : memref<?x10x10xf64>
                        %134 = arith.muli %arg10, %c-2 : index
                        %135 = arith.addi %134, %arg11 : index
                        %136 = arith.addi %135, %c-1 : index
                        %137 = arith.muli %arg10, %c-2 : index
                        %138 = arith.addi %137, %arg12 : index
                        %139 = memref.load %arg3[%c8, %136, %138] : memref<?x10x10xf64>
                        %140 = arith.muli %arg10, %c-2 : index
                        %141 = arith.addi %140, %arg11 : index
                        %142 = arith.addi %141, %c-1 : index
                        %143 = arith.muli %arg10, %c-2 : index
                        %144 = arith.addi %143, %arg12 : index
                        %145 = arith.addi %144, %c-2 : index
                        %146 = memref.load %arg3[%c8, %142, %145] : memref<?x10x10xf64>
                        %147 = arith.muli %arg10, %c-2 : index
                        %148 = arith.addi %147, %arg11 : index
                        %149 = arith.addi %148, %c-1 : index
                        %150 = arith.muli %arg10, %c-2 : index
                        %151 = arith.addi %150, %arg12 : index
                        %152 = arith.addi %151, %c-1 : index
                        %153 = memref.load %arg3[%c8, %149, %152] : memref<?x10x10xf64>
                        %154 = arith.mulf %153, %cst : f64
                        %155 = arith.subf %113, %154 : f64
                        %156 = arith.addf %155, %120 : f64
                        %157 = arith.mulf %156, %cst_0 : f64
                        %158 = arith.subf %126, %154 : f64
                        %159 = arith.addf %158, %133 : f64
                        %160 = arith.mulf %159, %cst_0 : f64
                        %161 = arith.addf %157, %160 : f64
                        %162 = arith.subf %139, %154 : f64
                        %163 = arith.addf %162, %146 : f64
                        %164 = arith.mulf %163, %cst_0 : f64
                        %165 = arith.addf %161, %164 : f64
                        %166 = arith.addf %165, %153 : f64
                        %167 = arith.muli %arg10, %c-2 : index
                        %168 = arith.addi %167, %arg11 : index
                        %169 = arith.addi %168, %c-1 : index
                        %170 = arith.muli %arg10, %c-2 : index
                        %171 = arith.addi %170, %arg12 : index
                        %172 = arith.addi %171, %c-1 : index
                        memref.store %166, %arg2[%c8, %169, %172] : memref<?x10x10xf64>
                      }
                    }
                  }
                }
                %30 = arith.muli %arg7, %c-1 : index
                %31 = arith.muli %arg8, %c-1 : index
                %32 = arith.addi %30, %31 : index
                %33 = arith.muli %arg9, %c-1 : index
                %34 = arith.addi %32, %33 : index
                %35 = arith.muli %arg4, %c-32 : index
                %36 = arith.addi %34, %35 : index
                %37 = arith.muli %arg5, %c-32 : index
                %38 = arith.addi %36, %37 : index
                %39 = arith.muli %arg6, %c-32 : index
                %40 = arith.addi %38, %39 : index
                %41 = arith.addi %40, %c2 : index
                %42 = arith.cmpi sge, %41, %c0 : index
                scf.if %42 {
                  %43 = arith.muli %arg7, %c32 : index
                  %44 = arith.muli %arg4, %c1024 : index
                  %45 = arith.addi %43, %44 : index
                  %46 = arith.maxsi %45, %c31 : index
                  %47 = arith.muli %arg7, %c32 : index
                  %48 = arith.muli %arg4, %c1024 : index
                  %49 = arith.addi %47, %48 : index
                  %50 = arith.addi %49, %c32 : index
                  %51 = arith.minsi %50, %c39 : index
                  scf.for %arg10 = %46 to %51 step %c1 {
                    %52 = arith.muli %arg8, %c32 : index
                    %53 = arith.muli %arg5, %c1024 : index
                    %54 = arith.addi %52, %53 : index
                    %55 = arith.maxsi %54, %c31 : index
                    %56 = arith.muli %arg8, %c32 : index
                    %57 = arith.muli %arg5, %c1024 : index
                    %58 = arith.addi %56, %57 : index
                    %59 = arith.addi %58, %c32 : index
                    %60 = arith.minsi %59, %c39 : index
                    scf.for %arg11 = %55 to %60 step %c1 {
                      %61 = arith.muli %arg9, %c32 : index
                      %62 = arith.muli %arg6, %c1024 : index
                      %63 = arith.addi %61, %62 : index
                      %64 = arith.maxsi %63, %c31 : index
                      %65 = arith.muli %arg9, %c32 : index
                      %66 = arith.muli %arg6, %c1024 : index
                      %67 = arith.addi %65, %66 : index
                      %68 = arith.addi %67, %c32 : index
                      %69 = arith.minsi %68, %c39 : index
                      scf.for %arg12 = %64 to %69 step %c1 {
                        %70 = arith.addi %arg10, %c-29 : index
                        %71 = arith.addi %arg11, %c-30 : index
                        %72 = arith.addi %arg12, %c-30 : index
                        %73 = memref.load %arg2[%70, %71, %72] : memref<?x10x10xf64>
                        %74 = arith.addi %arg10, %c-31 : index
                        %75 = arith.addi %arg11, %c-30 : index
                        %76 = arith.addi %arg12, %c-30 : index
                        %77 = memref.load %arg2[%74, %75, %76] : memref<?x10x10xf64>
                        %78 = arith.addi %arg10, %c-30 : index
                        %79 = arith.addi %arg11, %c-29 : index
                        %80 = arith.addi %arg12, %c-30 : index
                        %81 = memref.load %arg2[%78, %79, %80] : memref<?x10x10xf64>
                        %82 = arith.addi %arg10, %c-30 : index
                        %83 = arith.addi %arg11, %c-31 : index
                        %84 = arith.addi %arg12, %c-30 : index
                        %85 = memref.load %arg2[%82, %83, %84] : memref<?x10x10xf64>
                        %86 = arith.addi %arg10, %c-30 : index
                        %87 = arith.addi %arg11, %c-30 : index
                        %88 = arith.addi %arg12, %c-29 : index
                        %89 = memref.load %arg2[%86, %87, %88] : memref<?x10x10xf64>
                        %90 = arith.addi %arg10, %c-30 : index
                        %91 = arith.addi %arg11, %c-30 : index
                        %92 = arith.addi %arg12, %c-31 : index
                        %93 = memref.load %arg2[%90, %91, %92] : memref<?x10x10xf64>
                        %94 = arith.addi %arg10, %c-30 : index
                        %95 = arith.addi %arg11, %c-30 : index
                        %96 = arith.addi %arg12, %c-30 : index
                        %97 = memref.load %arg2[%94, %95, %96] : memref<?x10x10xf64>
                        %98 = arith.mulf %97, %cst : f64
                        %99 = arith.subf %73, %98 : f64
                        %100 = arith.addf %99, %77 : f64
                        %101 = arith.mulf %100, %cst_0 : f64
                        %102 = arith.subf %81, %98 : f64
                        %103 = arith.addf %102, %85 : f64
                        %104 = arith.mulf %103, %cst_0 : f64
                        %105 = arith.addf %101, %104 : f64
                        %106 = arith.subf %89, %98 : f64
                        %107 = arith.addf %106, %93 : f64
                        %108 = arith.mulf %107, %cst_0 : f64
                        %109 = arith.addf %105, %108 : f64
                        %110 = arith.addf %109, %97 : f64
                        %111 = arith.addi %arg10, %c-30 : index
                        %112 = arith.addi %arg11, %c-30 : index
                        %113 = arith.addi %arg12, %c-30 : index
                        memref.store %110, %arg3[%111, %112, %113] : memref<?x10x10xf64>
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return
  }
}

