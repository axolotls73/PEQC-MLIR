module {
  func.func @kernel_heat_3d(%arg0: i32, %arg1: i32, %arg2: memref<?x10x10xf64>, %arg3: memref<?x10x10xf64>) {
    %c-31 = arith.constant -31 : index
    %c-30 = arith.constant -30 : index
    %c-29 = arith.constant -29 : index
    %c39 = arith.constant 39 : index
    %c31 = arith.constant 31 : index
    %c10 = arith.constant 10 : index
    %c7 = arith.constant 7 : index
    %c8 = arith.constant 8 : index
    %c-11 = arith.constant -11 : index
    %c-2 = arith.constant -2 : index
    %c9 = arith.constant 9 : index
    %c32 = arith.constant 32 : index
    %c-1 = arith.constant -1 : index
    %c15 = arith.constant 15 : index
    %c21 = arith.constant 21 : index
    %c-4 = arith.constant -4 : index
    %c16 = arith.constant 16 : index
    %cst = arith.constant 2.000000e+00 : f64
    %cst_0 = arith.constant 1.250000e-01 : f64
    %c0 = arith.constant 0 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    scf.for %arg4 = %c0 to %c2 step %c1 {
      scf.for %arg5 = %c0 to %c2 step %c1 {
        scf.for %arg6 = %c0 to %c2 step %c1 {
          scf.for %arg7 = %c0 to %c1 step %c1 {
            scf.for %arg8 = %c0 to %c1 step %c1 {
              scf.for %arg9 = %c0 to %c1 step %c1 {
                %0 = arith.muli %arg4, %c16 : index
                %1 = arith.muli %arg7, %c16 : index
                %2 = arith.addi %0, %1 : index
                %3 = arith.addi %2, %c-4 : index
                %4 = arith.muli %arg5, %c16 : index
                %5 = arith.muli %arg8, %c16 : index
                %6 = arith.addi %4, %5 : index
                %7 = arith.addi %6, %c-4 : index
                %8 = arith.muli %arg6, %c16 : index
                %9 = arith.muli %arg9, %c16 : index
                %10 = arith.addi %8, %9 : index
                %11 = arith.addi %10, %c-4 : index
                %12 = arith.maxsi %3, %c1 : index
                %13 = arith.maxsi %12, %7 : index
                %14 = arith.maxsi %13, %11 : index
                %15 = arith.muli %arg4, %c16 : index
                %16 = arith.muli %arg7, %c16 : index
                %17 = arith.addi %15, %16 : index
                %18 = arith.addi %17, %c15 : index
                %19 = arith.muli %arg5, %c16 : index
                %20 = arith.muli %arg8, %c16 : index
                %21 = arith.addi %19, %20 : index
                %22 = arith.addi %21, %c15 : index
                %23 = arith.muli %arg6, %c16 : index
                %24 = arith.muli %arg9, %c16 : index
                %25 = arith.addi %23, %24 : index
                %26 = arith.addi %25, %c15 : index
                %27 = arith.minsi %18, %c21 : index
                %28 = arith.minsi %27, %22 : index
                %29 = arith.minsi %28, %26 : index
                scf.for %arg10 = %14 to %29 step %c1 {
                  %43 = arith.muli %arg4, %c-1 : index
                  %44 = arith.muli %arg7, %c-1 : index
                  %45 = arith.addi %43, %44 : index
                  %46 = arith.cmpi slt, %arg10, %c0 : index
                  %47 = arith.subi %c-1, %arg10 : index
                  %48 = arith.select %46, %47, %arg10 : index
                  %49 = arith.divsi %48, %c16 : index
                  %50 = arith.subi %c-1, %49 : index
                  %51 = arith.select %46, %50, %49 : index
                  %52 = arith.addi %45, %51 : index
                  %53 = arith.cmpi sge, %52, %c0 : index
                  scf.if %53 {
                    %80 = arith.muli %arg5, %c32 : index
                    %81 = arith.muli %arg8, %c32 : index
                    %82 = arith.addi %80, %81 : index
                    %83 = arith.muli %arg10, %c2 : index
                    %84 = arith.addi %83, %c1 : index
                    %85 = arith.maxsi %82, %84 : index
                    %86 = arith.muli %arg5, %c32 : index
                    %87 = arith.muli %arg8, %c32 : index
                    %88 = arith.addi %86, %87 : index
                    %89 = arith.addi %88, %c32 : index
                    %90 = arith.muli %arg10, %c2 : index
                    %91 = arith.addi %90, %c9 : index
                    %92 = arith.minsi %89, %91 : index
                    scf.for %arg11 = %85 to %92 step %c1 {
                      %93 = arith.muli %arg6, %c32 : index
                      %94 = arith.muli %arg9, %c32 : index
                      %95 = arith.addi %93, %94 : index
                      %96 = arith.muli %arg10, %c2 : index
                      %97 = arith.addi %96, %c1 : index
                      %98 = arith.maxsi %95, %97 : index
                      %99 = arith.muli %arg6, %c32 : index
                      %100 = arith.muli %arg9, %c32 : index
                      %101 = arith.addi %99, %100 : index
                      %102 = arith.addi %101, %c32 : index
                      %103 = arith.muli %arg10, %c2 : index
                      %104 = arith.addi %103, %c9 : index
                      %105 = arith.minsi %102, %104 : index
                      scf.for %arg12 = %98 to %105 step %c1 {
                        %106 = arith.muli %arg10, %c-2 : index
                        %107 = arith.addi %106, %arg11 : index
                        %108 = arith.muli %arg10, %c-2 : index
                        %109 = arith.addi %108, %arg12 : index
                        %110 = memref.load %arg2[%c2, %107, %109] : memref<?x10x10xf64>
                        %111 = arith.muli %arg10, %c-2 : index
                        %112 = arith.addi %111, %arg11 : index
                        %113 = arith.muli %arg10, %c-2 : index
                        %114 = arith.addi %113, %arg12 : index
                        %115 = memref.load %arg2[%c0, %112, %114] : memref<?x10x10xf64>
                        %116 = arith.muli %arg10, %c-2 : index
                        %117 = arith.addi %116, %arg11 : index
                        %118 = arith.addi %117, %c1 : index
                        %119 = arith.muli %arg10, %c-2 : index
                        %120 = arith.addi %119, %arg12 : index
                        %121 = memref.load %arg2[%c1, %118, %120] : memref<?x10x10xf64>
                        %122 = arith.muli %arg10, %c-2 : index
                        %123 = arith.addi %122, %arg11 : index
                        %124 = arith.addi %123, %c-1 : index
                        %125 = arith.muli %arg10, %c-2 : index
                        %126 = arith.addi %125, %arg12 : index
                        %127 = memref.load %arg2[%c1, %124, %126] : memref<?x10x10xf64>
                        %128 = arith.muli %arg10, %c-2 : index
                        %129 = arith.addi %128, %arg11 : index
                        %130 = arith.muli %arg10, %c-2 : index
                        %131 = arith.addi %130, %arg12 : index
                        %132 = arith.addi %131, %c1 : index
                        %133 = memref.load %arg2[%c1, %129, %132] : memref<?x10x10xf64>
                        %134 = arith.muli %arg10, %c-2 : index
                        %135 = arith.addi %134, %arg11 : index
                        %136 = arith.muli %arg10, %c-2 : index
                        %137 = arith.addi %136, %arg12 : index
                        %138 = arith.addi %137, %c-1 : index
                        %139 = memref.load %arg2[%c1, %135, %138] : memref<?x10x10xf64>
                        %140 = arith.muli %arg10, %c-2 : index
                        %141 = arith.addi %140, %arg11 : index
                        %142 = arith.muli %arg10, %c-2 : index
                        %143 = arith.addi %142, %arg12 : index
                        %144 = memref.load %arg2[%c1, %141, %143] : memref<?x10x10xf64>
                        %145 = arith.mulf %144, %cst : f64
                        %146 = arith.subf %110, %145 : f64
                        %147 = arith.addf %146, %115 : f64
                        %148 = arith.mulf %147, %cst_0 : f64
                        %149 = arith.subf %121, %145 : f64
                        %150 = arith.addf %149, %127 : f64
                        %151 = arith.mulf %150, %cst_0 : f64
                        %152 = arith.addf %148, %151 : f64
                        %153 = arith.subf %133, %145 : f64
                        %154 = arith.addf %153, %139 : f64
                        %155 = arith.mulf %154, %cst_0 : f64
                        %156 = arith.addf %152, %155 : f64
                        %157 = arith.addf %156, %144 : f64
                        %158 = arith.muli %arg10, %c-2 : index
                        %159 = arith.addi %158, %arg11 : index
                        %160 = arith.muli %arg10, %c-2 : index
                        %161 = arith.addi %160, %arg12 : index
                        memref.store %157, %arg3[%c1, %159, %161] : memref<?x10x10xf64>
                      }
                    }
                  }
                  %54 = arith.muli %arg4, %c32 : index
                  %55 = arith.muli %arg7, %c32 : index
                  %56 = arith.addi %54, %55 : index
                  %57 = arith.muli %arg10, %c2 : index
                  %58 = arith.addi %57, %c2 : index
                  %59 = arith.maxsi %56, %58 : index
                  %60 = arith.muli %arg4, %c32 : index
                  %61 = arith.muli %arg7, %c32 : index
                  %62 = arith.addi %60, %61 : index
                  %63 = arith.addi %62, %c32 : index
                  %64 = arith.muli %arg10, %c2 : index
                  %65 = arith.addi %64, %c9 : index
                  %66 = arith.minsi %63, %65 : index
                  scf.for %arg11 = %59 to %66 step %c1 {
                    %80 = arith.muli %arg5, %c-1 : index
                    %81 = arith.muli %arg8, %c-1 : index
                    %82 = arith.addi %80, %81 : index
                    %83 = arith.cmpi slt, %arg10, %c0 : index
                    %84 = arith.subi %c-1, %arg10 : index
                    %85 = arith.select %83, %84, %arg10 : index
                    %86 = arith.divsi %85, %c16 : index
                    %87 = arith.subi %c-1, %86 : index
                    %88 = arith.select %83, %87, %86 : index
                    %89 = arith.addi %82, %88 : index
                    %90 = arith.cmpi sge, %89, %c0 : index
                    scf.if %90 {
                      %117 = arith.muli %arg6, %c32 : index
                      %118 = arith.muli %arg9, %c32 : index
                      %119 = arith.addi %117, %118 : index
                      %120 = arith.muli %arg10, %c2 : index
                      %121 = arith.addi %120, %c1 : index
                      %122 = arith.maxsi %119, %121 : index
                      %123 = arith.muli %arg6, %c32 : index
                      %124 = arith.muli %arg9, %c32 : index
                      %125 = arith.addi %123, %124 : index
                      %126 = arith.addi %125, %c32 : index
                      %127 = arith.muli %arg10, %c2 : index
                      %128 = arith.addi %127, %c9 : index
                      %129 = arith.minsi %126, %128 : index
                      scf.for %arg12 = %122 to %129 step %c1 {
                        %130 = arith.muli %arg10, %c-2 : index
                        %131 = arith.addi %130, %arg11 : index
                        %132 = arith.addi %131, %c1 : index
                        %133 = arith.muli %arg10, %c-2 : index
                        %134 = arith.addi %133, %arg12 : index
                        %135 = memref.load %arg2[%132, %c1, %134] : memref<?x10x10xf64>
                        %136 = arith.muli %arg10, %c-2 : index
                        %137 = arith.addi %136, %arg11 : index
                        %138 = arith.addi %137, %c-1 : index
                        %139 = arith.muli %arg10, %c-2 : index
                        %140 = arith.addi %139, %arg12 : index
                        %141 = memref.load %arg2[%138, %c1, %140] : memref<?x10x10xf64>
                        %142 = arith.muli %arg10, %c-2 : index
                        %143 = arith.addi %142, %arg11 : index
                        %144 = arith.muli %arg10, %c-2 : index
                        %145 = arith.addi %144, %arg12 : index
                        %146 = memref.load %arg2[%143, %c2, %145] : memref<?x10x10xf64>
                        %147 = arith.muli %arg10, %c-2 : index
                        %148 = arith.addi %147, %arg11 : index
                        %149 = arith.muli %arg10, %c-2 : index
                        %150 = arith.addi %149, %arg12 : index
                        %151 = memref.load %arg2[%148, %c0, %150] : memref<?x10x10xf64>
                        %152 = arith.muli %arg10, %c-2 : index
                        %153 = arith.addi %152, %arg11 : index
                        %154 = arith.muli %arg10, %c-2 : index
                        %155 = arith.addi %154, %arg12 : index
                        %156 = arith.addi %155, %c1 : index
                        %157 = memref.load %arg2[%153, %c1, %156] : memref<?x10x10xf64>
                        %158 = arith.muli %arg10, %c-2 : index
                        %159 = arith.addi %158, %arg11 : index
                        %160 = arith.muli %arg10, %c-2 : index
                        %161 = arith.addi %160, %arg12 : index
                        %162 = arith.addi %161, %c-1 : index
                        %163 = memref.load %arg2[%159, %c1, %162] : memref<?x10x10xf64>
                        %164 = arith.muli %arg10, %c-2 : index
                        %165 = arith.addi %164, %arg11 : index
                        %166 = arith.muli %arg10, %c-2 : index
                        %167 = arith.addi %166, %arg12 : index
                        %168 = memref.load %arg2[%165, %c1, %167] : memref<?x10x10xf64>
                        %169 = arith.mulf %168, %cst : f64
                        %170 = arith.subf %135, %169 : f64
                        %171 = arith.addf %170, %141 : f64
                        %172 = arith.mulf %171, %cst_0 : f64
                        %173 = arith.subf %146, %169 : f64
                        %174 = arith.addf %173, %151 : f64
                        %175 = arith.mulf %174, %cst_0 : f64
                        %176 = arith.addf %172, %175 : f64
                        %177 = arith.subf %157, %169 : f64
                        %178 = arith.addf %177, %163 : f64
                        %179 = arith.mulf %178, %cst_0 : f64
                        %180 = arith.addf %176, %179 : f64
                        %181 = arith.addf %180, %168 : f64
                        %182 = arith.muli %arg10, %c-2 : index
                        %183 = arith.addi %182, %arg11 : index
                        %184 = arith.muli %arg10, %c-2 : index
                        %185 = arith.addi %184, %arg12 : index
                        memref.store %181, %arg3[%183, %c1, %185] : memref<?x10x10xf64>
                      }
                    }
                    %91 = arith.muli %arg5, %c32 : index
                    %92 = arith.muli %arg8, %c32 : index
                    %93 = arith.addi %91, %92 : index
                    %94 = arith.muli %arg10, %c2 : index
                    %95 = arith.addi %94, %c2 : index
                    %96 = arith.maxsi %93, %95 : index
                    %97 = arith.muli %arg5, %c32 : index
                    %98 = arith.muli %arg8, %c32 : index
                    %99 = arith.addi %97, %98 : index
                    %100 = arith.addi %99, %c32 : index
                    %101 = arith.muli %arg10, %c2 : index
                    %102 = arith.addi %101, %c9 : index
                    %103 = arith.minsi %100, %102 : index
                    scf.for %arg12 = %96 to %103 step %c1 {
                      %117 = arith.muli %arg6, %c-1 : index
                      %118 = arith.muli %arg9, %c-1 : index
                      %119 = arith.addi %117, %118 : index
                      %120 = arith.cmpi slt, %arg10, %c0 : index
                      %121 = arith.subi %c-1, %arg10 : index
                      %122 = arith.select %120, %121, %arg10 : index
                      %123 = arith.divsi %122, %c16 : index
                      %124 = arith.subi %c-1, %123 : index
                      %125 = arith.select %120, %124, %123 : index
                      %126 = arith.addi %119, %125 : index
                      %127 = arith.cmpi sge, %126, %c0 : index
                      scf.if %127 {
                        %154 = arith.muli %arg10, %c-2 : index
                        %155 = arith.addi %154, %arg11 : index
                        %156 = arith.addi %155, %c1 : index
                        %157 = arith.muli %arg10, %c-2 : index
                        %158 = arith.addi %157, %arg12 : index
                        %159 = memref.load %arg2[%156, %158, %c1] : memref<?x10x10xf64>
                        %160 = arith.muli %arg10, %c-2 : index
                        %161 = arith.addi %160, %arg11 : index
                        %162 = arith.addi %161, %c-1 : index
                        %163 = arith.muli %arg10, %c-2 : index
                        %164 = arith.addi %163, %arg12 : index
                        %165 = memref.load %arg2[%162, %164, %c1] : memref<?x10x10xf64>
                        %166 = arith.muli %arg10, %c-2 : index
                        %167 = arith.addi %166, %arg11 : index
                        %168 = arith.muli %arg10, %c-2 : index
                        %169 = arith.addi %168, %arg12 : index
                        %170 = arith.addi %169, %c1 : index
                        %171 = memref.load %arg2[%167, %170, %c1] : memref<?x10x10xf64>
                        %172 = arith.muli %arg10, %c-2 : index
                        %173 = arith.addi %172, %arg11 : index
                        %174 = arith.muli %arg10, %c-2 : index
                        %175 = arith.addi %174, %arg12 : index
                        %176 = arith.addi %175, %c-1 : index
                        %177 = memref.load %arg2[%173, %176, %c1] : memref<?x10x10xf64>
                        %178 = arith.muli %arg10, %c-2 : index
                        %179 = arith.addi %178, %arg11 : index
                        %180 = arith.muli %arg10, %c-2 : index
                        %181 = arith.addi %180, %arg12 : index
                        %182 = memref.load %arg2[%179, %181, %c2] : memref<?x10x10xf64>
                        %183 = arith.muli %arg10, %c-2 : index
                        %184 = arith.addi %183, %arg11 : index
                        %185 = arith.muli %arg10, %c-2 : index
                        %186 = arith.addi %185, %arg12 : index
                        %187 = memref.load %arg2[%184, %186, %c0] : memref<?x10x10xf64>
                        %188 = arith.muli %arg10, %c-2 : index
                        %189 = arith.addi %188, %arg11 : index
                        %190 = arith.muli %arg10, %c-2 : index
                        %191 = arith.addi %190, %arg12 : index
                        %192 = memref.load %arg2[%189, %191, %c1] : memref<?x10x10xf64>
                        %193 = arith.mulf %192, %cst : f64
                        %194 = arith.subf %159, %193 : f64
                        %195 = arith.addf %194, %165 : f64
                        %196 = arith.mulf %195, %cst_0 : f64
                        %197 = arith.subf %171, %193 : f64
                        %198 = arith.addf %197, %177 : f64
                        %199 = arith.mulf %198, %cst_0 : f64
                        %200 = arith.addf %196, %199 : f64
                        %201 = arith.subf %182, %193 : f64
                        %202 = arith.addf %201, %187 : f64
                        %203 = arith.mulf %202, %cst_0 : f64
                        %204 = arith.addf %200, %203 : f64
                        %205 = arith.addf %204, %192 : f64
                        %206 = arith.muli %arg10, %c-2 : index
                        %207 = arith.addi %206, %arg11 : index
                        %208 = arith.muli %arg10, %c-2 : index
                        %209 = arith.addi %208, %arg12 : index
                        memref.store %205, %arg3[%207, %209, %c1] : memref<?x10x10xf64>
                      }
                      %128 = arith.muli %arg6, %c32 : index
                      %129 = arith.muli %arg9, %c32 : index
                      %130 = arith.addi %128, %129 : index
                      %131 = arith.muli %arg10, %c2 : index
                      %132 = arith.addi %131, %c2 : index
                      %133 = arith.maxsi %130, %132 : index
                      %134 = arith.muli %arg6, %c32 : index
                      %135 = arith.muli %arg9, %c32 : index
                      %136 = arith.addi %134, %135 : index
                      %137 = arith.addi %136, %c32 : index
                      %138 = arith.muli %arg10, %c2 : index
                      %139 = arith.addi %138, %c9 : index
                      %140 = arith.minsi %137, %139 : index
                      scf.for %arg13 = %133 to %140 step %c1 {
                        %154 = arith.muli %arg10, %c-2 : index
                        %155 = arith.addi %154, %arg11 : index
                        %156 = arith.addi %155, %c1 : index
                        %157 = arith.muli %arg10, %c-2 : index
                        %158 = arith.addi %157, %arg12 : index
                        %159 = arith.muli %arg10, %c-2 : index
                        %160 = arith.addi %159, %arg13 : index
                        %161 = memref.load %arg2[%156, %158, %160] : memref<?x10x10xf64>
                        %162 = arith.muli %arg10, %c-2 : index
                        %163 = arith.addi %162, %arg11 : index
                        %164 = arith.addi %163, %c-1 : index
                        %165 = arith.muli %arg10, %c-2 : index
                        %166 = arith.addi %165, %arg12 : index
                        %167 = arith.muli %arg10, %c-2 : index
                        %168 = arith.addi %167, %arg13 : index
                        %169 = memref.load %arg2[%164, %166, %168] : memref<?x10x10xf64>
                        %170 = arith.muli %arg10, %c-2 : index
                        %171 = arith.addi %170, %arg11 : index
                        %172 = arith.muli %arg10, %c-2 : index
                        %173 = arith.addi %172, %arg12 : index
                        %174 = arith.addi %173, %c1 : index
                        %175 = arith.muli %arg10, %c-2 : index
                        %176 = arith.addi %175, %arg13 : index
                        %177 = memref.load %arg2[%171, %174, %176] : memref<?x10x10xf64>
                        %178 = arith.muli %arg10, %c-2 : index
                        %179 = arith.addi %178, %arg11 : index
                        %180 = arith.muli %arg10, %c-2 : index
                        %181 = arith.addi %180, %arg12 : index
                        %182 = arith.addi %181, %c-1 : index
                        %183 = arith.muli %arg10, %c-2 : index
                        %184 = arith.addi %183, %arg13 : index
                        %185 = memref.load %arg2[%179, %182, %184] : memref<?x10x10xf64>
                        %186 = arith.muli %arg10, %c-2 : index
                        %187 = arith.addi %186, %arg11 : index
                        %188 = arith.muli %arg10, %c-2 : index
                        %189 = arith.addi %188, %arg12 : index
                        %190 = arith.muli %arg10, %c-2 : index
                        %191 = arith.addi %190, %arg13 : index
                        %192 = arith.addi %191, %c1 : index
                        %193 = memref.load %arg2[%187, %189, %192] : memref<?x10x10xf64>
                        %194 = arith.muli %arg10, %c-2 : index
                        %195 = arith.addi %194, %arg11 : index
                        %196 = arith.muli %arg10, %c-2 : index
                        %197 = arith.addi %196, %arg12 : index
                        %198 = arith.muli %arg10, %c-2 : index
                        %199 = arith.addi %198, %arg13 : index
                        %200 = arith.addi %199, %c-1 : index
                        %201 = memref.load %arg2[%195, %197, %200] : memref<?x10x10xf64>
                        %202 = arith.muli %arg10, %c-2 : index
                        %203 = arith.addi %202, %arg11 : index
                        %204 = arith.muli %arg10, %c-2 : index
                        %205 = arith.addi %204, %arg12 : index
                        %206 = arith.muli %arg10, %c-2 : index
                        %207 = arith.addi %206, %arg13 : index
                        %208 = memref.load %arg2[%203, %205, %207] : memref<?x10x10xf64>
                        %209 = arith.mulf %208, %cst : f64
                        %210 = arith.subf %161, %209 : f64
                        %211 = arith.addf %210, %169 : f64
                        %212 = arith.mulf %211, %cst_0 : f64
                        %213 = arith.subf %177, %209 : f64
                        %214 = arith.addf %213, %185 : f64
                        %215 = arith.mulf %214, %cst_0 : f64
                        %216 = arith.addf %212, %215 : f64
                        %217 = arith.subf %193, %209 : f64
                        %218 = arith.addf %217, %201 : f64
                        %219 = arith.mulf %218, %cst_0 : f64
                        %220 = arith.addf %216, %219 : f64
                        %221 = arith.addf %220, %208 : f64
                        %222 = arith.muli %arg10, %c-2 : index
                        %223 = arith.addi %222, %arg11 : index
                        %224 = arith.muli %arg10, %c-2 : index
                        %225 = arith.addi %224, %arg12 : index
                        %226 = arith.muli %arg10, %c-2 : index
                        %227 = arith.addi %226, %arg13 : index
                        memref.store %221, %arg3[%223, %225, %227] : memref<?x10x10xf64>
                        %228 = arith.muli %arg10, %c-2 : index
                        %229 = arith.addi %228, %arg11 : index
                        %230 = arith.muli %arg10, %c-2 : index
                        %231 = arith.addi %230, %arg12 : index
                        %232 = arith.addi %231, %c-1 : index
                        %233 = arith.muli %arg10, %c-2 : index
                        %234 = arith.addi %233, %arg13 : index
                        %235 = arith.addi %234, %c-1 : index
                        %236 = memref.load %arg3[%229, %232, %235] : memref<?x10x10xf64>
                        %237 = arith.muli %arg10, %c-2 : index
                        %238 = arith.addi %237, %arg11 : index
                        %239 = arith.addi %238, %c-2 : index
                        %240 = arith.muli %arg10, %c-2 : index
                        %241 = arith.addi %240, %arg12 : index
                        %242 = arith.addi %241, %c-1 : index
                        %243 = arith.muli %arg10, %c-2 : index
                        %244 = arith.addi %243, %arg13 : index
                        %245 = arith.addi %244, %c-1 : index
                        %246 = memref.load %arg3[%239, %242, %245] : memref<?x10x10xf64>
                        %247 = arith.muli %arg10, %c-2 : index
                        %248 = arith.addi %247, %arg11 : index
                        %249 = arith.addi %248, %c-1 : index
                        %250 = arith.muli %arg10, %c-2 : index
                        %251 = arith.addi %250, %arg12 : index
                        %252 = arith.muli %arg10, %c-2 : index
                        %253 = arith.addi %252, %arg13 : index
                        %254 = arith.addi %253, %c-1 : index
                        %255 = memref.load %arg3[%249, %251, %254] : memref<?x10x10xf64>
                        %256 = arith.muli %arg10, %c-2 : index
                        %257 = arith.addi %256, %arg11 : index
                        %258 = arith.addi %257, %c-1 : index
                        %259 = arith.muli %arg10, %c-2 : index
                        %260 = arith.addi %259, %arg12 : index
                        %261 = arith.addi %260, %c-2 : index
                        %262 = arith.muli %arg10, %c-2 : index
                        %263 = arith.addi %262, %arg13 : index
                        %264 = arith.addi %263, %c-1 : index
                        %265 = memref.load %arg3[%258, %261, %264] : memref<?x10x10xf64>
                        %266 = arith.muli %arg10, %c-2 : index
                        %267 = arith.addi %266, %arg11 : index
                        %268 = arith.addi %267, %c-1 : index
                        %269 = arith.muli %arg10, %c-2 : index
                        %270 = arith.addi %269, %arg12 : index
                        %271 = arith.addi %270, %c-1 : index
                        %272 = arith.muli %arg10, %c-2 : index
                        %273 = arith.addi %272, %arg13 : index
                        %274 = memref.load %arg3[%268, %271, %273] : memref<?x10x10xf64>
                        %275 = arith.muli %arg10, %c-2 : index
                        %276 = arith.addi %275, %arg11 : index
                        %277 = arith.addi %276, %c-1 : index
                        %278 = arith.muli %arg10, %c-2 : index
                        %279 = arith.addi %278, %arg12 : index
                        %280 = arith.addi %279, %c-1 : index
                        %281 = arith.muli %arg10, %c-2 : index
                        %282 = arith.addi %281, %arg13 : index
                        %283 = arith.addi %282, %c-2 : index
                        %284 = memref.load %arg3[%277, %280, %283] : memref<?x10x10xf64>
                        %285 = arith.muli %arg10, %c-2 : index
                        %286 = arith.addi %285, %arg11 : index
                        %287 = arith.addi %286, %c-1 : index
                        %288 = arith.muli %arg10, %c-2 : index
                        %289 = arith.addi %288, %arg12 : index
                        %290 = arith.addi %289, %c-1 : index
                        %291 = arith.muli %arg10, %c-2 : index
                        %292 = arith.addi %291, %arg13 : index
                        %293 = arith.addi %292, %c-1 : index
                        %294 = memref.load %arg3[%287, %290, %293] : memref<?x10x10xf64>
                        %295 = arith.mulf %294, %cst : f64
                        %296 = arith.subf %236, %295 : f64
                        %297 = arith.addf %296, %246 : f64
                        %298 = arith.mulf %297, %cst_0 : f64
                        %299 = arith.subf %255, %295 : f64
                        %300 = arith.addf %299, %265 : f64
                        %301 = arith.mulf %300, %cst_0 : f64
                        %302 = arith.addf %298, %301 : f64
                        %303 = arith.subf %274, %295 : f64
                        %304 = arith.addf %303, %284 : f64
                        %305 = arith.mulf %304, %cst_0 : f64
                        %306 = arith.addf %302, %305 : f64
                        %307 = arith.addf %306, %294 : f64
                        %308 = arith.muli %arg10, %c-2 : index
                        %309 = arith.addi %308, %arg11 : index
                        %310 = arith.addi %309, %c-1 : index
                        %311 = arith.muli %arg10, %c-2 : index
                        %312 = arith.addi %311, %arg12 : index
                        %313 = arith.addi %312, %c-1 : index
                        %314 = arith.muli %arg10, %c-2 : index
                        %315 = arith.addi %314, %arg13 : index
                        %316 = arith.addi %315, %c-1 : index
                        memref.store %307, %arg2[%310, %313, %316] : memref<?x10x10xf64>
                      }
                      %141 = arith.addi %arg6, %arg9 : index
                      %142 = arith.addi %arg10, %c-11 : index
                      %143 = arith.cmpi sle, %142, %c0 : index
                      %144 = arith.subi %c0, %142 : index
                      %145 = arith.subi %142, %c1 : index
                      %146 = arith.select %143, %144, %145 : index
                      %147 = arith.divsi %146, %c16 : index
                      %148 = arith.subi %c0, %147 : index
                      %149 = arith.addi %147, %c1 : index
                      %150 = arith.select %143, %148, %149 : index
                      %151 = arith.muli %150, %c-1 : index
                      %152 = arith.addi %141, %151 : index
                      %153 = arith.cmpi sge, %152, %c0 : index
                      scf.if %153 {
                        %154 = arith.muli %arg10, %c-2 : index
                        %155 = arith.addi %154, %arg11 : index
                        %156 = arith.muli %arg10, %c-2 : index
                        %157 = arith.addi %156, %arg12 : index
                        %158 = arith.addi %157, %c-1 : index
                        %159 = memref.load %arg3[%155, %158, %c8] : memref<?x10x10xf64>
                        %160 = arith.muli %arg10, %c-2 : index
                        %161 = arith.addi %160, %arg11 : index
                        %162 = arith.addi %161, %c-2 : index
                        %163 = arith.muli %arg10, %c-2 : index
                        %164 = arith.addi %163, %arg12 : index
                        %165 = arith.addi %164, %c-1 : index
                        %166 = memref.load %arg3[%162, %165, %c8] : memref<?x10x10xf64>
                        %167 = arith.muli %arg10, %c-2 : index
                        %168 = arith.addi %167, %arg11 : index
                        %169 = arith.addi %168, %c-1 : index
                        %170 = arith.muli %arg10, %c-2 : index
                        %171 = arith.addi %170, %arg12 : index
                        %172 = memref.load %arg3[%169, %171, %c8] : memref<?x10x10xf64>
                        %173 = arith.muli %arg10, %c-2 : index
                        %174 = arith.addi %173, %arg11 : index
                        %175 = arith.addi %174, %c-1 : index
                        %176 = arith.muli %arg10, %c-2 : index
                        %177 = arith.addi %176, %arg12 : index
                        %178 = arith.addi %177, %c-2 : index
                        %179 = memref.load %arg3[%175, %178, %c8] : memref<?x10x10xf64>
                        %180 = arith.muli %arg10, %c-2 : index
                        %181 = arith.addi %180, %arg11 : index
                        %182 = arith.addi %181, %c-1 : index
                        %183 = arith.muli %arg10, %c-2 : index
                        %184 = arith.addi %183, %arg12 : index
                        %185 = arith.addi %184, %c-1 : index
                        %186 = memref.load %arg3[%182, %185, %c9] : memref<?x10x10xf64>
                        %187 = arith.muli %arg10, %c-2 : index
                        %188 = arith.addi %187, %arg11 : index
                        %189 = arith.addi %188, %c-1 : index
                        %190 = arith.muli %arg10, %c-2 : index
                        %191 = arith.addi %190, %arg12 : index
                        %192 = arith.addi %191, %c-1 : index
                        %193 = memref.load %arg3[%189, %192, %c7] : memref<?x10x10xf64>
                        %194 = arith.muli %arg10, %c-2 : index
                        %195 = arith.addi %194, %arg11 : index
                        %196 = arith.addi %195, %c-1 : index
                        %197 = arith.muli %arg10, %c-2 : index
                        %198 = arith.addi %197, %arg12 : index
                        %199 = arith.addi %198, %c-1 : index
                        %200 = memref.load %arg3[%196, %199, %c8] : memref<?x10x10xf64>
                        %201 = arith.mulf %200, %cst : f64
                        %202 = arith.subf %159, %201 : f64
                        %203 = arith.addf %202, %166 : f64
                        %204 = arith.mulf %203, %cst_0 : f64
                        %205 = arith.subf %172, %201 : f64
                        %206 = arith.addf %205, %179 : f64
                        %207 = arith.mulf %206, %cst_0 : f64
                        %208 = arith.addf %204, %207 : f64
                        %209 = arith.subf %186, %201 : f64
                        %210 = arith.addf %209, %193 : f64
                        %211 = arith.mulf %210, %cst_0 : f64
                        %212 = arith.addf %208, %211 : f64
                        %213 = arith.addf %212, %200 : f64
                        %214 = arith.muli %arg10, %c-2 : index
                        %215 = arith.addi %214, %arg11 : index
                        %216 = arith.addi %215, %c-1 : index
                        %217 = arith.muli %arg10, %c-2 : index
                        %218 = arith.addi %217, %arg12 : index
                        %219 = arith.addi %218, %c-1 : index
                        memref.store %213, %arg2[%216, %219, %c8] : memref<?x10x10xf64>
                      }
                    }
                    %104 = arith.addi %arg5, %arg8 : index
                    %105 = arith.addi %arg10, %c-11 : index
                    %106 = arith.cmpi sle, %105, %c0 : index
                    %107 = arith.subi %c0, %105 : index
                    %108 = arith.subi %105, %c1 : index
                    %109 = arith.select %106, %107, %108 : index
                    %110 = arith.divsi %109, %c16 : index
                    %111 = arith.subi %c0, %110 : index
                    %112 = arith.addi %110, %c1 : index
                    %113 = arith.select %106, %111, %112 : index
                    %114 = arith.muli %113, %c-1 : index
                    %115 = arith.addi %104, %114 : index
                    %116 = arith.cmpi sge, %115, %c0 : index
                    scf.if %116 {
                      %117 = arith.muli %arg6, %c32 : index
                      %118 = arith.muli %arg9, %c32 : index
                      %119 = arith.addi %117, %118 : index
                      %120 = arith.muli %arg10, %c2 : index
                      %121 = arith.addi %120, %c2 : index
                      %122 = arith.maxsi %119, %121 : index
                      %123 = arith.muli %arg6, %c32 : index
                      %124 = arith.muli %arg9, %c32 : index
                      %125 = arith.addi %123, %124 : index
                      %126 = arith.addi %125, %c32 : index
                      %127 = arith.muli %arg10, %c2 : index
                      %128 = arith.addi %127, %c10 : index
                      %129 = arith.minsi %126, %128 : index
                      scf.for %arg12 = %122 to %129 step %c1 {
                        %130 = arith.muli %arg10, %c-2 : index
                        %131 = arith.addi %130, %arg11 : index
                        %132 = arith.muli %arg10, %c-2 : index
                        %133 = arith.addi %132, %arg12 : index
                        %134 = arith.addi %133, %c-1 : index
                        %135 = memref.load %arg3[%131, %c8, %134] : memref<?x10x10xf64>
                        %136 = arith.muli %arg10, %c-2 : index
                        %137 = arith.addi %136, %arg11 : index
                        %138 = arith.addi %137, %c-2 : index
                        %139 = arith.muli %arg10, %c-2 : index
                        %140 = arith.addi %139, %arg12 : index
                        %141 = arith.addi %140, %c-1 : index
                        %142 = memref.load %arg3[%138, %c8, %141] : memref<?x10x10xf64>
                        %143 = arith.muli %arg10, %c-2 : index
                        %144 = arith.addi %143, %arg11 : index
                        %145 = arith.addi %144, %c-1 : index
                        %146 = arith.muli %arg10, %c-2 : index
                        %147 = arith.addi %146, %arg12 : index
                        %148 = arith.addi %147, %c-1 : index
                        %149 = memref.load %arg3[%145, %c9, %148] : memref<?x10x10xf64>
                        %150 = arith.muli %arg10, %c-2 : index
                        %151 = arith.addi %150, %arg11 : index
                        %152 = arith.addi %151, %c-1 : index
                        %153 = arith.muli %arg10, %c-2 : index
                        %154 = arith.addi %153, %arg12 : index
                        %155 = arith.addi %154, %c-1 : index
                        %156 = memref.load %arg3[%152, %c7, %155] : memref<?x10x10xf64>
                        %157 = arith.muli %arg10, %c-2 : index
                        %158 = arith.addi %157, %arg11 : index
                        %159 = arith.addi %158, %c-1 : index
                        %160 = arith.muli %arg10, %c-2 : index
                        %161 = arith.addi %160, %arg12 : index
                        %162 = memref.load %arg3[%159, %c8, %161] : memref<?x10x10xf64>
                        %163 = arith.muli %arg10, %c-2 : index
                        %164 = arith.addi %163, %arg11 : index
                        %165 = arith.addi %164, %c-1 : index
                        %166 = arith.muli %arg10, %c-2 : index
                        %167 = arith.addi %166, %arg12 : index
                        %168 = arith.addi %167, %c-2 : index
                        %169 = memref.load %arg3[%165, %c8, %168] : memref<?x10x10xf64>
                        %170 = arith.muli %arg10, %c-2 : index
                        %171 = arith.addi %170, %arg11 : index
                        %172 = arith.addi %171, %c-1 : index
                        %173 = arith.muli %arg10, %c-2 : index
                        %174 = arith.addi %173, %arg12 : index
                        %175 = arith.addi %174, %c-1 : index
                        %176 = memref.load %arg3[%172, %c8, %175] : memref<?x10x10xf64>
                        %177 = arith.mulf %176, %cst : f64
                        %178 = arith.subf %135, %177 : f64
                        %179 = arith.addf %178, %142 : f64
                        %180 = arith.mulf %179, %cst_0 : f64
                        %181 = arith.subf %149, %177 : f64
                        %182 = arith.addf %181, %156 : f64
                        %183 = arith.mulf %182, %cst_0 : f64
                        %184 = arith.addf %180, %183 : f64
                        %185 = arith.subf %162, %177 : f64
                        %186 = arith.addf %185, %169 : f64
                        %187 = arith.mulf %186, %cst_0 : f64
                        %188 = arith.addf %184, %187 : f64
                        %189 = arith.addf %188, %176 : f64
                        %190 = arith.muli %arg10, %c-2 : index
                        %191 = arith.addi %190, %arg11 : index
                        %192 = arith.addi %191, %c-1 : index
                        %193 = arith.muli %arg10, %c-2 : index
                        %194 = arith.addi %193, %arg12 : index
                        %195 = arith.addi %194, %c-1 : index
                        memref.store %189, %arg2[%192, %c8, %195] : memref<?x10x10xf64>
                      }
                    }
                  }
                  %67 = arith.addi %arg4, %arg7 : index
                  %68 = arith.addi %arg10, %c-11 : index
                  %69 = arith.cmpi sle, %68, %c0 : index
                  %70 = arith.subi %c0, %68 : index
                  %71 = arith.subi %68, %c1 : index
                  %72 = arith.select %69, %70, %71 : index
                  %73 = arith.divsi %72, %c16 : index
                  %74 = arith.subi %c0, %73 : index
                  %75 = arith.addi %73, %c1 : index
                  %76 = arith.select %69, %74, %75 : index
                  %77 = arith.muli %76, %c-1 : index
                  %78 = arith.addi %67, %77 : index
                  %79 = arith.cmpi sge, %78, %c0 : index
                  scf.if %79 {
                    %80 = arith.muli %arg5, %c32 : index
                    %81 = arith.muli %arg8, %c32 : index
                    %82 = arith.addi %80, %81 : index
                    %83 = arith.muli %arg10, %c2 : index
                    %84 = arith.addi %83, %c2 : index
                    %85 = arith.maxsi %82, %84 : index
                    %86 = arith.muli %arg5, %c32 : index
                    %87 = arith.muli %arg8, %c32 : index
                    %88 = arith.addi %86, %87 : index
                    %89 = arith.addi %88, %c32 : index
                    %90 = arith.muli %arg10, %c2 : index
                    %91 = arith.addi %90, %c10 : index
                    %92 = arith.minsi %89, %91 : index
                    scf.for %arg11 = %85 to %92 step %c1 {
                      %93 = arith.muli %arg6, %c32 : index
                      %94 = arith.muli %arg9, %c32 : index
                      %95 = arith.addi %93, %94 : index
                      %96 = arith.muli %arg10, %c2 : index
                      %97 = arith.addi %96, %c2 : index
                      %98 = arith.maxsi %95, %97 : index
                      %99 = arith.muli %arg6, %c32 : index
                      %100 = arith.muli %arg9, %c32 : index
                      %101 = arith.addi %99, %100 : index
                      %102 = arith.addi %101, %c32 : index
                      %103 = arith.muli %arg10, %c2 : index
                      %104 = arith.addi %103, %c10 : index
                      %105 = arith.minsi %102, %104 : index
                      scf.for %arg12 = %98 to %105 step %c1 {
                        %106 = arith.muli %arg10, %c-2 : index
                        %107 = arith.addi %106, %arg11 : index
                        %108 = arith.addi %107, %c-1 : index
                        %109 = arith.muli %arg10, %c-2 : index
                        %110 = arith.addi %109, %arg12 : index
                        %111 = arith.addi %110, %c-1 : index
                        %112 = memref.load %arg3[%c9, %108, %111] : memref<?x10x10xf64>
                        %113 = arith.muli %arg10, %c-2 : index
                        %114 = arith.addi %113, %arg11 : index
                        %115 = arith.addi %114, %c-1 : index
                        %116 = arith.muli %arg10, %c-2 : index
                        %117 = arith.addi %116, %arg12 : index
                        %118 = arith.addi %117, %c-1 : index
                        %119 = memref.load %arg3[%c7, %115, %118] : memref<?x10x10xf64>
                        %120 = arith.muli %arg10, %c-2 : index
                        %121 = arith.addi %120, %arg11 : index
                        %122 = arith.muli %arg10, %c-2 : index
                        %123 = arith.addi %122, %arg12 : index
                        %124 = arith.addi %123, %c-1 : index
                        %125 = memref.load %arg3[%c8, %121, %124] : memref<?x10x10xf64>
                        %126 = arith.muli %arg10, %c-2 : index
                        %127 = arith.addi %126, %arg11 : index
                        %128 = arith.addi %127, %c-2 : index
                        %129 = arith.muli %arg10, %c-2 : index
                        %130 = arith.addi %129, %arg12 : index
                        %131 = arith.addi %130, %c-1 : index
                        %132 = memref.load %arg3[%c8, %128, %131] : memref<?x10x10xf64>
                        %133 = arith.muli %arg10, %c-2 : index
                        %134 = arith.addi %133, %arg11 : index
                        %135 = arith.addi %134, %c-1 : index
                        %136 = arith.muli %arg10, %c-2 : index
                        %137 = arith.addi %136, %arg12 : index
                        %138 = memref.load %arg3[%c8, %135, %137] : memref<?x10x10xf64>
                        %139 = arith.muli %arg10, %c-2 : index
                        %140 = arith.addi %139, %arg11 : index
                        %141 = arith.addi %140, %c-1 : index
                        %142 = arith.muli %arg10, %c-2 : index
                        %143 = arith.addi %142, %arg12 : index
                        %144 = arith.addi %143, %c-2 : index
                        %145 = memref.load %arg3[%c8, %141, %144] : memref<?x10x10xf64>
                        %146 = arith.muli %arg10, %c-2 : index
                        %147 = arith.addi %146, %arg11 : index
                        %148 = arith.addi %147, %c-1 : index
                        %149 = arith.muli %arg10, %c-2 : index
                        %150 = arith.addi %149, %arg12 : index
                        %151 = arith.addi %150, %c-1 : index
                        %152 = memref.load %arg3[%c8, %148, %151] : memref<?x10x10xf64>
                        %153 = arith.mulf %152, %cst : f64
                        %154 = arith.subf %112, %153 : f64
                        %155 = arith.addf %154, %119 : f64
                        %156 = arith.mulf %155, %cst_0 : f64
                        %157 = arith.subf %125, %153 : f64
                        %158 = arith.addf %157, %132 : f64
                        %159 = arith.mulf %158, %cst_0 : f64
                        %160 = arith.addf %156, %159 : f64
                        %161 = arith.subf %138, %153 : f64
                        %162 = arith.addf %161, %145 : f64
                        %163 = arith.mulf %162, %cst_0 : f64
                        %164 = arith.addf %160, %163 : f64
                        %165 = arith.addf %164, %152 : f64
                        %166 = arith.muli %arg10, %c-2 : index
                        %167 = arith.addi %166, %arg11 : index
                        %168 = arith.addi %167, %c-1 : index
                        %169 = arith.muli %arg10, %c-2 : index
                        %170 = arith.addi %169, %arg12 : index
                        %171 = arith.addi %170, %c-1 : index
                        memref.store %165, %arg2[%c8, %168, %171] : memref<?x10x10xf64>
                      }
                    }
                  }
                }
                %30 = arith.muli %arg4, %c-1 : index
                %31 = arith.muli %arg7, %c-1 : index
                %32 = arith.addi %30, %31 : index
                %33 = arith.muli %arg5, %c-1 : index
                %34 = arith.addi %32, %33 : index
                %35 = arith.muli %arg8, %c-1 : index
                %36 = arith.addi %34, %35 : index
                %37 = arith.muli %arg6, %c-1 : index
                %38 = arith.addi %36, %37 : index
                %39 = arith.muli %arg9, %c-1 : index
                %40 = arith.addi %38, %39 : index
                %41 = arith.addi %40, %c2 : index
                %42 = arith.cmpi sge, %41, %c0 : index
                scf.if %42 {
                  %43 = arith.muli %arg4, %c32 : index
                  %44 = arith.muli %arg7, %c32 : index
                  %45 = arith.addi %43, %44 : index
                  %46 = arith.maxsi %45, %c31 : index
                  %47 = arith.muli %arg4, %c32 : index
                  %48 = arith.muli %arg7, %c32 : index
                  %49 = arith.addi %47, %48 : index
                  %50 = arith.addi %49, %c32 : index
                  %51 = arith.minsi %50, %c39 : index
                  scf.for %arg10 = %46 to %51 step %c1 {
                    %52 = arith.muli %arg5, %c32 : index
                    %53 = arith.muli %arg8, %c32 : index
                    %54 = arith.addi %52, %53 : index
                    %55 = arith.maxsi %54, %c31 : index
                    %56 = arith.muli %arg5, %c32 : index
                    %57 = arith.muli %arg8, %c32 : index
                    %58 = arith.addi %56, %57 : index
                    %59 = arith.addi %58, %c32 : index
                    %60 = arith.minsi %59, %c39 : index
                    scf.for %arg11 = %55 to %60 step %c1 {
                      %61 = arith.muli %arg6, %c32 : index
                      %62 = arith.muli %arg9, %c32 : index
                      %63 = arith.addi %61, %62 : index
                      %64 = arith.maxsi %63, %c31 : index
                      %65 = arith.muli %arg6, %c32 : index
                      %66 = arith.muli %arg9, %c32 : index
                      %67 = arith.addi %65, %66 : index
                      %68 = arith.addi %67, %c32 : index
                      %69 = arith.minsi %68, %c39 : index
                      scf.for %arg12 = %64 to %69 step %c1 {
                        %70 = arith.addi %arg10, %c-29 : index
                        %71 = arith.addi %arg11, %c-30 : index
                        %72 = arith.addi %arg12, %c-30 : index
                        %73 = memref.load %arg2[%70, %71, %72] : memref<?x10x10xf64>
                        %74 = arith.addi %arg10, %c-31 : index
                        %75 = arith.addi %arg11, %c-30 : index
                        %76 = arith.addi %arg12, %c-30 : index
                        %77 = memref.load %arg2[%74, %75, %76] : memref<?x10x10xf64>
                        %78 = arith.addi %arg10, %c-30 : index
                        %79 = arith.addi %arg11, %c-29 : index
                        %80 = arith.addi %arg12, %c-30 : index
                        %81 = memref.load %arg2[%78, %79, %80] : memref<?x10x10xf64>
                        %82 = arith.addi %arg10, %c-30 : index
                        %83 = arith.addi %arg11, %c-31 : index
                        %84 = arith.addi %arg12, %c-30 : index
                        %85 = memref.load %arg2[%82, %83, %84] : memref<?x10x10xf64>
                        %86 = arith.addi %arg10, %c-30 : index
                        %87 = arith.addi %arg11, %c-30 : index
                        %88 = arith.addi %arg12, %c-29 : index
                        %89 = memref.load %arg2[%86, %87, %88] : memref<?x10x10xf64>
                        %90 = arith.addi %arg10, %c-30 : index
                        %91 = arith.addi %arg11, %c-30 : index
                        %92 = arith.addi %arg12, %c-31 : index
                        %93 = memref.load %arg2[%90, %91, %92] : memref<?x10x10xf64>
                        %94 = arith.addi %arg10, %c-30 : index
                        %95 = arith.addi %arg11, %c-30 : index
                        %96 = arith.addi %arg12, %c-30 : index
                        %97 = memref.load %arg2[%94, %95, %96] : memref<?x10x10xf64>
                        %98 = arith.mulf %97, %cst : f64
                        %99 = arith.subf %73, %98 : f64
                        %100 = arith.addf %99, %77 : f64
                        %101 = arith.mulf %100, %cst_0 : f64
                        %102 = arith.subf %81, %98 : f64
                        %103 = arith.addf %102, %85 : f64
                        %104 = arith.mulf %103, %cst_0 : f64
                        %105 = arith.addf %101, %104 : f64
                        %106 = arith.subf %89, %98 : f64
                        %107 = arith.addf %106, %93 : f64
                        %108 = arith.mulf %107, %cst_0 : f64
                        %109 = arith.addf %105, %108 : f64
                        %110 = arith.addf %109, %97 : f64
                        %111 = arith.addi %arg10, %c-30 : index
                        %112 = arith.addi %arg11, %c-30 : index
                        %113 = arith.addi %arg12, %c-30 : index
                        memref.store %110, %arg3[%111, %112, %113] : memref<?x10x10xf64>
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return
  }
}

