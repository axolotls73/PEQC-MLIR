module {
  func.func @kernel_seidel_2d(%arg0: i32, %arg1: i32, %arg2: memref<?x40xf64>) {
    %c37 = arith.constant 37 : index
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c-1 = arith.constant -1 : index
    %c4 = arith.constant 4 : index
    %c9 = arith.constant 9 : index
    %c38 = arith.constant 38 : index
    %cst = arith.constant 9.000000e+00 : f64
    %c0 = arith.constant 0 : index
    %c20 = arith.constant 20 : index
    %c1 = arith.constant 1 : index
    scf.for %arg3 = %c0 to %c20 step %c1 {
      scf.for %arg4 = %c0 to %c38 step %c1 {
        %0 = arith.addi %arg4, %c1 : index
        scf.for %arg5 = %c0 to %c1 step %c1 {
          scf.for %arg6 = %c0 to %c1 step %c1 {
            %1 = arith.addi %0, %arg6 : index
            scf.for %arg7 = %c0 to %c9 step %c1 {
              %2 = arith.muli %arg7, %c4 : index
              %3 = arith.addi %2, %c1 : index
              %4 = arith.addi %1, %c-1 : index
              %5 = arith.addi %3, %c-1 : index
              %6 = memref.load %arg2[%4, %5] : memref<?x40xf64>
              %7 = arith.addi %1, %c-1 : index
              %8 = memref.load %arg2[%7, %3] : memref<?x40xf64>
              %9 = arith.addf %6, %8 : f64
              %10 = arith.addi %1, %c-1 : index
              %11 = arith.addi %3, %c1 : index
              %12 = memref.load %arg2[%10, %11] : memref<?x40xf64>
              %13 = arith.addf %9, %12 : f64
              %14 = arith.addi %3, %c-1 : index
              %15 = memref.load %arg2[%1, %14] : memref<?x40xf64>
              %16 = arith.addf %13, %15 : f64
              %17 = memref.load %arg2[%1, %3] : memref<?x40xf64>
              %18 = arith.addf %16, %17 : f64
              %19 = arith.addi %3, %c1 : index
              %20 = memref.load %arg2[%1, %19] : memref<?x40xf64>
              %21 = arith.addf %18, %20 : f64
              %22 = arith.addi %1, %c1 : index
              %23 = arith.addi %3, %c-1 : index
              %24 = memref.load %arg2[%22, %23] : memref<?x40xf64>
              %25 = arith.addf %21, %24 : f64
              %26 = arith.addi %1, %c1 : index
              %27 = memref.load %arg2[%26, %3] : memref<?x40xf64>
              %28 = arith.addf %25, %27 : f64
              %29 = arith.addi %1, %c1 : index
              %30 = arith.addi %3, %c1 : index
              %31 = memref.load %arg2[%29, %30] : memref<?x40xf64>
              %32 = arith.addf %28, %31 : f64
              %33 = arith.divf %32, %cst : f64
              memref.store %33, %arg2[%1, %3] : memref<?x40xf64>
              %34 = arith.addi %3, %c1 : index
              %35 = arith.addi %1, %c-1 : index
              %36 = arith.addi %34, %c-1 : index
              %37 = memref.load %arg2[%35, %36] : memref<?x40xf64>
              %38 = arith.addi %1, %c-1 : index
              %39 = memref.load %arg2[%38, %34] : memref<?x40xf64>
              %40 = arith.addf %37, %39 : f64
              %41 = arith.addi %1, %c-1 : index
              %42 = arith.addi %34, %c1 : index
              %43 = memref.load %arg2[%41, %42] : memref<?x40xf64>
              %44 = arith.addf %40, %43 : f64
              %45 = arith.addi %34, %c-1 : index
              %46 = memref.load %arg2[%1, %45] : memref<?x40xf64>
              %47 = arith.addf %44, %46 : f64
              %48 = memref.load %arg2[%1, %34] : memref<?x40xf64>
              %49 = arith.addf %47, %48 : f64
              %50 = arith.addi %34, %c1 : index
              %51 = memref.load %arg2[%1, %50] : memref<?x40xf64>
              %52 = arith.addf %49, %51 : f64
              %53 = arith.addi %1, %c1 : index
              %54 = arith.addi %34, %c-1 : index
              %55 = memref.load %arg2[%53, %54] : memref<?x40xf64>
              %56 = arith.addf %52, %55 : f64
              %57 = arith.addi %1, %c1 : index
              %58 = memref.load %arg2[%57, %34] : memref<?x40xf64>
              %59 = arith.addf %56, %58 : f64
              %60 = arith.addi %1, %c1 : index
              %61 = arith.addi %34, %c1 : index
              %62 = memref.load %arg2[%60, %61] : memref<?x40xf64>
              %63 = arith.addf %59, %62 : f64
              %64 = arith.divf %63, %cst : f64
              memref.store %64, %arg2[%1, %34] : memref<?x40xf64>
              %65 = arith.addi %3, %c2 : index
              %66 = arith.addi %1, %c-1 : index
              %67 = arith.addi %65, %c-1 : index
              %68 = memref.load %arg2[%66, %67] : memref<?x40xf64>
              %69 = arith.addi %1, %c-1 : index
              %70 = memref.load %arg2[%69, %65] : memref<?x40xf64>
              %71 = arith.addf %68, %70 : f64
              %72 = arith.addi %1, %c-1 : index
              %73 = arith.addi %65, %c1 : index
              %74 = memref.load %arg2[%72, %73] : memref<?x40xf64>
              %75 = arith.addf %71, %74 : f64
              %76 = arith.addi %65, %c-1 : index
              %77 = memref.load %arg2[%1, %76] : memref<?x40xf64>
              %78 = arith.addf %75, %77 : f64
              %79 = memref.load %arg2[%1, %65] : memref<?x40xf64>
              %80 = arith.addf %78, %79 : f64
              %81 = arith.addi %65, %c1 : index
              %82 = memref.load %arg2[%1, %81] : memref<?x40xf64>
              %83 = arith.addf %80, %82 : f64
              %84 = arith.addi %1, %c1 : index
              %85 = arith.addi %65, %c-1 : index
              %86 = memref.load %arg2[%84, %85] : memref<?x40xf64>
              %87 = arith.addf %83, %86 : f64
              %88 = arith.addi %1, %c1 : index
              %89 = memref.load %arg2[%88, %65] : memref<?x40xf64>
              %90 = arith.addf %87, %89 : f64
              %91 = arith.addi %1, %c1 : index
              %92 = arith.addi %65, %c1 : index
              %93 = memref.load %arg2[%91, %92] : memref<?x40xf64>
              %94 = arith.addf %90, %93 : f64
              %95 = arith.divf %94, %cst : f64
              memref.store %95, %arg2[%1, %65] : memref<?x40xf64>
              %96 = arith.addi %3, %c3 : index
              %97 = arith.addi %1, %c-1 : index
              %98 = arith.addi %96, %c-1 : index
              %99 = memref.load %arg2[%97, %98] : memref<?x40xf64>
              %100 = arith.addi %1, %c-1 : index
              %101 = memref.load %arg2[%100, %96] : memref<?x40xf64>
              %102 = arith.addf %99, %101 : f64
              %103 = arith.addi %1, %c-1 : index
              %104 = arith.addi %96, %c1 : index
              %105 = memref.load %arg2[%103, %104] : memref<?x40xf64>
              %106 = arith.addf %102, %105 : f64
              %107 = arith.addi %96, %c-1 : index
              %108 = memref.load %arg2[%1, %107] : memref<?x40xf64>
              %109 = arith.addf %106, %108 : f64
              %110 = memref.load %arg2[%1, %96] : memref<?x40xf64>
              %111 = arith.addf %109, %110 : f64
              %112 = arith.addi %96, %c1 : index
              %113 = memref.load %arg2[%1, %112] : memref<?x40xf64>
              %114 = arith.addf %111, %113 : f64
              %115 = arith.addi %1, %c1 : index
              %116 = arith.addi %96, %c-1 : index
              %117 = memref.load %arg2[%115, %116] : memref<?x40xf64>
              %118 = arith.addf %114, %117 : f64
              %119 = arith.addi %1, %c1 : index
              %120 = memref.load %arg2[%119, %96] : memref<?x40xf64>
              %121 = arith.addf %118, %120 : f64
              %122 = arith.addi %1, %c1 : index
              %123 = arith.addi %96, %c1 : index
              %124 = memref.load %arg2[%122, %123] : memref<?x40xf64>
              %125 = arith.addf %121, %124 : f64
              %126 = arith.divf %125, %cst : f64
              memref.store %126, %arg2[%1, %96] : memref<?x40xf64>
            }
            scf.for %arg7 = %c0 to %c2 step %c1 {
              %2 = arith.addi %arg7, %c37 : index
              %3 = arith.addi %1, %c-1 : index
              %4 = arith.addi %2, %c-1 : index
              %5 = memref.load %arg2[%3, %4] : memref<?x40xf64>
              %6 = arith.addi %1, %c-1 : index
              %7 = memref.load %arg2[%6, %2] : memref<?x40xf64>
              %8 = arith.addf %5, %7 : f64
              %9 = arith.addi %1, %c-1 : index
              %10 = arith.addi %2, %c1 : index
              %11 = memref.load %arg2[%9, %10] : memref<?x40xf64>
              %12 = arith.addf %8, %11 : f64
              %13 = arith.addi %2, %c-1 : index
              %14 = memref.load %arg2[%1, %13] : memref<?x40xf64>
              %15 = arith.addf %12, %14 : f64
              %16 = memref.load %arg2[%1, %2] : memref<?x40xf64>
              %17 = arith.addf %15, %16 : f64
              %18 = arith.addi %2, %c1 : index
              %19 = memref.load %arg2[%1, %18] : memref<?x40xf64>
              %20 = arith.addf %17, %19 : f64
              %21 = arith.addi %1, %c1 : index
              %22 = arith.addi %2, %c-1 : index
              %23 = memref.load %arg2[%21, %22] : memref<?x40xf64>
              %24 = arith.addf %20, %23 : f64
              %25 = arith.addi %1, %c1 : index
              %26 = memref.load %arg2[%25, %2] : memref<?x40xf64>
              %27 = arith.addf %24, %26 : f64
              %28 = arith.addi %1, %c1 : index
              %29 = arith.addi %2, %c1 : index
              %30 = memref.load %arg2[%28, %29] : memref<?x40xf64>
              %31 = arith.addf %27, %30 : f64
              %32 = arith.divf %31, %cst : f64
              memref.store %32, %arg2[%1, %2] : memref<?x40xf64>
            }
          }
        }
      }
    }
    return
  }
}

