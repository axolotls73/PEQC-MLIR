module {
  func.func @kernel_adi(%arg0: i32, %arg1: i32, %arg2: memref<?x20xf64>, %arg3: memref<?x20xf64>, %arg4: memref<?x20xf64>, %arg5: memref<?x20xf64>) {
    %cst = arith.constant 9.9999999999999982 : f64
    %cst_0 = arith.constant -18.999999999999996 : f64
    %cst_1 = arith.constant -38.999999999999993 : f64
    %cst_2 = arith.constant -9.9999999999999982 : f64
    %cst_3 = arith.constant -19.999999999999996 : f64
    %cst_4 = arith.constant 20.999999999999996 : f64
    %cst_5 = arith.constant 40.999999999999993 : f64
    %cst_6 = arith.constant 19.999999999999996 : f64
    %cst_7 = arith.constant 0.000000e+00 : f64
    %cst_8 = arith.constant 1.000000e+00 : f64
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c1_9 = arith.constant 1 : index
    scf.for %arg6 = %c0 to %c1 step %c1_9 {
      %c32 = arith.constant 32 : index
      %0 = arith.muli %arg6, %c32 : index
      %c1_10 = arith.constant 1 : index
      %1 = arith.addi %0, %c1_10 : index
      %c0_11 = arith.constant 0 : index
      %c20 = arith.constant 20 : index
      %c1_12 = arith.constant 1 : index
      scf.for %arg7 = %c0_11 to %c20 step %c1_12 {
        %2 = arith.addi %1, %arg7 : index
        %c0_13 = arith.constant 0 : index
        %c18 = arith.constant 18 : index
        %c1_14 = arith.constant 1 : index
        scf.for %arg8 = %c0_13 to %c18 step %c1_14 {
          %c1_18 = arith.constant 1 : index
          %3 = arith.addi %arg8, %c1_18 : index
          %c0_19 = arith.constant 0 : index
          memref.store %cst_8, %arg3[%c0_19, %3] : memref<?x20xf64>
          %c0_20 = arith.constant 0 : index
          memref.store %cst_7, %arg4[%3, %c0_20] : memref<?x20xf64>
          %c0_21 = arith.constant 0 : index
          %4 = memref.load %arg3[%c0_21, %3] : memref<?x20xf64>
          %c0_22 = arith.constant 0 : index
          memref.store %4, %arg5[%3, %c0_22] : memref<?x20xf64>
          %c0_23 = arith.constant 0 : index
          %c4 = arith.constant 4 : index
          %c1_24 = arith.constant 1 : index
          scf.for %arg9 = %c0_23 to %c4 step %c1_24 {
            %c4_33 = arith.constant 4 : index
            %5 = arith.muli %arg9, %c4_33 : index
            %c1_34 = arith.constant 1 : index
            %6 = arith.addi %5, %c1_34 : index
            %c-1 = arith.constant -1 : index
            %7 = arith.addi %6, %c-1 : index
            %8 = memref.load %arg4[%3, %7] : memref<?x20xf64>
            %9 = arith.mulf %8, %cst_3 : f64
            %10 = arith.addf %9, %cst_5 : f64
            %11 = arith.divf %cst_6, %10 : f64
            memref.store %11, %arg4[%3, %6] : memref<?x20xf64>
            %c-1_35 = arith.constant -1 : index
            %12 = arith.addi %3, %c-1_35 : index
            %13 = memref.load %arg2[%6, %12] : memref<?x20xf64>
            %14 = arith.mulf %13, %cst : f64
            %15 = memref.load %arg2[%6, %3] : memref<?x20xf64>
            %16 = arith.mulf %15, %cst_0 : f64
            %17 = arith.addf %14, %16 : f64
            %c1_36 = arith.constant 1 : index
            %18 = arith.addi %3, %c1_36 : index
            %19 = memref.load %arg2[%6, %18] : memref<?x20xf64>
            %20 = arith.mulf %19, %cst_2 : f64
            %21 = arith.subf %17, %20 : f64
            %c-1_37 = arith.constant -1 : index
            %22 = arith.addi %6, %c-1_37 : index
            %23 = memref.load %arg5[%3, %22] : memref<?x20xf64>
            %24 = arith.mulf %23, %cst_3 : f64
            %25 = arith.subf %21, %24 : f64
            %26 = arith.divf %25, %10 : f64
            memref.store %26, %arg5[%3, %6] : memref<?x20xf64>
            %c1_38 = arith.constant 1 : index
            %27 = arith.addi %6, %c1_38 : index
            %c-1_39 = arith.constant -1 : index
            %28 = arith.addi %27, %c-1_39 : index
            %29 = memref.load %arg4[%3, %28] : memref<?x20xf64>
            %30 = arith.mulf %29, %cst_3 : f64
            %31 = arith.addf %30, %cst_5 : f64
            %32 = arith.divf %cst_6, %31 : f64
            memref.store %32, %arg4[%3, %27] : memref<?x20xf64>
            %c-1_40 = arith.constant -1 : index
            %33 = arith.addi %3, %c-1_40 : index
            %34 = memref.load %arg2[%27, %33] : memref<?x20xf64>
            %35 = arith.mulf %34, %cst : f64
            %36 = memref.load %arg2[%27, %3] : memref<?x20xf64>
            %37 = arith.mulf %36, %cst_0 : f64
            %38 = arith.addf %35, %37 : f64
            %c1_41 = arith.constant 1 : index
            %39 = arith.addi %3, %c1_41 : index
            %40 = memref.load %arg2[%27, %39] : memref<?x20xf64>
            %41 = arith.mulf %40, %cst_2 : f64
            %42 = arith.subf %38, %41 : f64
            %c-1_42 = arith.constant -1 : index
            %43 = arith.addi %27, %c-1_42 : index
            %44 = memref.load %arg5[%3, %43] : memref<?x20xf64>
            %45 = arith.mulf %44, %cst_3 : f64
            %46 = arith.subf %42, %45 : f64
            %47 = arith.divf %46, %31 : f64
            memref.store %47, %arg5[%3, %27] : memref<?x20xf64>
            %c2_43 = arith.constant 2 : index
            %48 = arith.addi %6, %c2_43 : index
            %c-1_44 = arith.constant -1 : index
            %49 = arith.addi %48, %c-1_44 : index
            %50 = memref.load %arg4[%3, %49] : memref<?x20xf64>
            %51 = arith.mulf %50, %cst_3 : f64
            %52 = arith.addf %51, %cst_5 : f64
            %53 = arith.divf %cst_6, %52 : f64
            memref.store %53, %arg4[%3, %48] : memref<?x20xf64>
            %c-1_45 = arith.constant -1 : index
            %54 = arith.addi %3, %c-1_45 : index
            %55 = memref.load %arg2[%48, %54] : memref<?x20xf64>
            %56 = arith.mulf %55, %cst : f64
            %57 = memref.load %arg2[%48, %3] : memref<?x20xf64>
            %58 = arith.mulf %57, %cst_0 : f64
            %59 = arith.addf %56, %58 : f64
            %c1_46 = arith.constant 1 : index
            %60 = arith.addi %3, %c1_46 : index
            %61 = memref.load %arg2[%48, %60] : memref<?x20xf64>
            %62 = arith.mulf %61, %cst_2 : f64
            %63 = arith.subf %59, %62 : f64
            %c-1_47 = arith.constant -1 : index
            %64 = arith.addi %48, %c-1_47 : index
            %65 = memref.load %arg5[%3, %64] : memref<?x20xf64>
            %66 = arith.mulf %65, %cst_3 : f64
            %67 = arith.subf %63, %66 : f64
            %68 = arith.divf %67, %52 : f64
            memref.store %68, %arg5[%3, %48] : memref<?x20xf64>
            %c3 = arith.constant 3 : index
            %69 = arith.addi %6, %c3 : index
            %c-1_48 = arith.constant -1 : index
            %70 = arith.addi %69, %c-1_48 : index
            %71 = memref.load %arg4[%3, %70] : memref<?x20xf64>
            %72 = arith.mulf %71, %cst_3 : f64
            %73 = arith.addf %72, %cst_5 : f64
            %74 = arith.divf %cst_6, %73 : f64
            memref.store %74, %arg4[%3, %69] : memref<?x20xf64>
            %c-1_49 = arith.constant -1 : index
            %75 = arith.addi %3, %c-1_49 : index
            %76 = memref.load %arg2[%69, %75] : memref<?x20xf64>
            %77 = arith.mulf %76, %cst : f64
            %78 = memref.load %arg2[%69, %3] : memref<?x20xf64>
            %79 = arith.mulf %78, %cst_0 : f64
            %80 = arith.addf %77, %79 : f64
            %c1_50 = arith.constant 1 : index
            %81 = arith.addi %3, %c1_50 : index
            %82 = memref.load %arg2[%69, %81] : memref<?x20xf64>
            %83 = arith.mulf %82, %cst_2 : f64
            %84 = arith.subf %80, %83 : f64
            %c-1_51 = arith.constant -1 : index
            %85 = arith.addi %69, %c-1_51 : index
            %86 = memref.load %arg5[%3, %85] : memref<?x20xf64>
            %87 = arith.mulf %86, %cst_3 : f64
            %88 = arith.subf %84, %87 : f64
            %89 = arith.divf %88, %73 : f64
            memref.store %89, %arg5[%3, %69] : memref<?x20xf64>
          }
          %c0_25 = arith.constant 0 : index
          %c2 = arith.constant 2 : index
          %c1_26 = arith.constant 1 : index
          scf.for %arg9 = %c0_25 to %c2 step %c1_26 {
            %c17 = arith.constant 17 : index
            %5 = arith.addi %arg9, %c17 : index
            %c-1 = arith.constant -1 : index
            %6 = arith.addi %5, %c-1 : index
            %7 = memref.load %arg4[%3, %6] : memref<?x20xf64>
            %8 = arith.mulf %7, %cst_3 : f64
            %9 = arith.addf %8, %cst_5 : f64
            %10 = arith.divf %cst_6, %9 : f64
            memref.store %10, %arg4[%3, %5] : memref<?x20xf64>
            %c-1_33 = arith.constant -1 : index
            %11 = arith.addi %3, %c-1_33 : index
            %12 = memref.load %arg2[%5, %11] : memref<?x20xf64>
            %13 = arith.mulf %12, %cst : f64
            %14 = memref.load %arg2[%5, %3] : memref<?x20xf64>
            %15 = arith.mulf %14, %cst_0 : f64
            %16 = arith.addf %13, %15 : f64
            %c1_34 = arith.constant 1 : index
            %17 = arith.addi %3, %c1_34 : index
            %18 = memref.load %arg2[%5, %17] : memref<?x20xf64>
            %19 = arith.mulf %18, %cst_2 : f64
            %20 = arith.subf %16, %19 : f64
            %c-1_35 = arith.constant -1 : index
            %21 = arith.addi %5, %c-1_35 : index
            %22 = memref.load %arg5[%3, %21] : memref<?x20xf64>
            %23 = arith.mulf %22, %cst_3 : f64
            %24 = arith.subf %20, %23 : f64
            %25 = arith.divf %24, %9 : f64
            memref.store %25, %arg5[%3, %5] : memref<?x20xf64>
          }
          %c19 = arith.constant 19 : index
          memref.store %cst_8, %arg3[%c19, %3] : memref<?x20xf64>
          %c0_27 = arith.constant 0 : index
          %c4_28 = arith.constant 4 : index
          %c1_29 = arith.constant 1 : index
          scf.for %arg9 = %c0_27 to %c4_28 step %c1_29 {
            %c4_33 = arith.constant 4 : index
            %5 = arith.muli %arg9, %c4_33 : index
            %c1_34 = arith.constant 1 : index
            %6 = arith.addi %5, %c1_34 : index
            %c-1 = arith.constant -1 : index
            %7 = arith.muli %6, %c-1 : index
            %c19_35 = arith.constant 19 : index
            %8 = arith.addi %7, %c19_35 : index
            %9 = memref.load %arg4[%3, %8] : memref<?x20xf64>
            %c-1_36 = arith.constant -1 : index
            %10 = arith.muli %6, %c-1_36 : index
            %c20_37 = arith.constant 20 : index
            %11 = arith.addi %10, %c20_37 : index
            %12 = memref.load %arg3[%11, %3] : memref<?x20xf64>
            %13 = arith.mulf %9, %12 : f64
            %c-1_38 = arith.constant -1 : index
            %14 = arith.muli %6, %c-1_38 : index
            %c19_39 = arith.constant 19 : index
            %15 = arith.addi %14, %c19_39 : index
            %16 = memref.load %arg5[%3, %15] : memref<?x20xf64>
            %17 = arith.addf %13, %16 : f64
            %c-1_40 = arith.constant -1 : index
            %18 = arith.muli %6, %c-1_40 : index
            %c19_41 = arith.constant 19 : index
            %19 = arith.addi %18, %c19_41 : index
            memref.store %17, %arg3[%19, %3] : memref<?x20xf64>
            %c1_42 = arith.constant 1 : index
            %20 = arith.addi %6, %c1_42 : index
            %c-1_43 = arith.constant -1 : index
            %21 = arith.muli %20, %c-1_43 : index
            %c19_44 = arith.constant 19 : index
            %22 = arith.addi %21, %c19_44 : index
            %23 = memref.load %arg4[%3, %22] : memref<?x20xf64>
            %c-1_45 = arith.constant -1 : index
            %24 = arith.muli %20, %c-1_45 : index
            %c20_46 = arith.constant 20 : index
            %25 = arith.addi %24, %c20_46 : index
            %26 = memref.load %arg3[%25, %3] : memref<?x20xf64>
            %27 = arith.mulf %23, %26 : f64
            %c-1_47 = arith.constant -1 : index
            %28 = arith.muli %20, %c-1_47 : index
            %c19_48 = arith.constant 19 : index
            %29 = arith.addi %28, %c19_48 : index
            %30 = memref.load %arg5[%3, %29] : memref<?x20xf64>
            %31 = arith.addf %27, %30 : f64
            %c-1_49 = arith.constant -1 : index
            %32 = arith.muli %20, %c-1_49 : index
            %c19_50 = arith.constant 19 : index
            %33 = arith.addi %32, %c19_50 : index
            memref.store %31, %arg3[%33, %3] : memref<?x20xf64>
            %c2_51 = arith.constant 2 : index
            %34 = arith.addi %6, %c2_51 : index
            %c-1_52 = arith.constant -1 : index
            %35 = arith.muli %34, %c-1_52 : index
            %c19_53 = arith.constant 19 : index
            %36 = arith.addi %35, %c19_53 : index
            %37 = memref.load %arg4[%3, %36] : memref<?x20xf64>
            %c-1_54 = arith.constant -1 : index
            %38 = arith.muli %34, %c-1_54 : index
            %c20_55 = arith.constant 20 : index
            %39 = arith.addi %38, %c20_55 : index
            %40 = memref.load %arg3[%39, %3] : memref<?x20xf64>
            %41 = arith.mulf %37, %40 : f64
            %c-1_56 = arith.constant -1 : index
            %42 = arith.muli %34, %c-1_56 : index
            %c19_57 = arith.constant 19 : index
            %43 = arith.addi %42, %c19_57 : index
            %44 = memref.load %arg5[%3, %43] : memref<?x20xf64>
            %45 = arith.addf %41, %44 : f64
            %c-1_58 = arith.constant -1 : index
            %46 = arith.muli %34, %c-1_58 : index
            %c19_59 = arith.constant 19 : index
            %47 = arith.addi %46, %c19_59 : index
            memref.store %45, %arg3[%47, %3] : memref<?x20xf64>
            %c3 = arith.constant 3 : index
            %48 = arith.addi %6, %c3 : index
            %c-1_60 = arith.constant -1 : index
            %49 = arith.muli %48, %c-1_60 : index
            %c19_61 = arith.constant 19 : index
            %50 = arith.addi %49, %c19_61 : index
            %51 = memref.load %arg4[%3, %50] : memref<?x20xf64>
            %c-1_62 = arith.constant -1 : index
            %52 = arith.muli %48, %c-1_62 : index
            %c20_63 = arith.constant 20 : index
            %53 = arith.addi %52, %c20_63 : index
            %54 = memref.load %arg3[%53, %3] : memref<?x20xf64>
            %55 = arith.mulf %51, %54 : f64
            %c-1_64 = arith.constant -1 : index
            %56 = arith.muli %48, %c-1_64 : index
            %c19_65 = arith.constant 19 : index
            %57 = arith.addi %56, %c19_65 : index
            %58 = memref.load %arg5[%3, %57] : memref<?x20xf64>
            %59 = arith.addf %55, %58 : f64
            %c-1_66 = arith.constant -1 : index
            %60 = arith.muli %48, %c-1_66 : index
            %c19_67 = arith.constant 19 : index
            %61 = arith.addi %60, %c19_67 : index
            memref.store %59, %arg3[%61, %3] : memref<?x20xf64>
          }
          %c0_30 = arith.constant 0 : index
          %c2_31 = arith.constant 2 : index
          %c1_32 = arith.constant 1 : index
          scf.for %arg9 = %c0_30 to %c2_31 step %c1_32 {
            %c17 = arith.constant 17 : index
            %5 = arith.addi %arg9, %c17 : index
            %c-1 = arith.constant -1 : index
            %6 = arith.muli %5, %c-1 : index
            %c19_33 = arith.constant 19 : index
            %7 = arith.addi %6, %c19_33 : index
            %8 = memref.load %arg4[%3, %7] : memref<?x20xf64>
            %c-1_34 = arith.constant -1 : index
            %9 = arith.muli %5, %c-1_34 : index
            %c20_35 = arith.constant 20 : index
            %10 = arith.addi %9, %c20_35 : index
            %11 = memref.load %arg3[%10, %3] : memref<?x20xf64>
            %12 = arith.mulf %8, %11 : f64
            %c-1_36 = arith.constant -1 : index
            %13 = arith.muli %5, %c-1_36 : index
            %c19_37 = arith.constant 19 : index
            %14 = arith.addi %13, %c19_37 : index
            %15 = memref.load %arg5[%3, %14] : memref<?x20xf64>
            %16 = arith.addf %12, %15 : f64
            %c-1_38 = arith.constant -1 : index
            %17 = arith.muli %5, %c-1_38 : index
            %c19_39 = arith.constant 19 : index
            %18 = arith.addi %17, %c19_39 : index
            memref.store %16, %arg3[%18, %3] : memref<?x20xf64>
          }
        }
        %c0_15 = arith.constant 0 : index
        %c18_16 = arith.constant 18 : index
        %c1_17 = arith.constant 1 : index
        scf.for %arg8 = %c0_15 to %c18_16 step %c1_17 {
          %c1_18 = arith.constant 1 : index
          %3 = arith.addi %arg8, %c1_18 : index
          %c0_19 = arith.constant 0 : index
          memref.store %cst_8, %arg2[%3, %c0_19] : memref<?x20xf64>
          %c0_20 = arith.constant 0 : index
          memref.store %cst_7, %arg4[%3, %c0_20] : memref<?x20xf64>
          %c0_21 = arith.constant 0 : index
          %4 = memref.load %arg2[%3, %c0_21] : memref<?x20xf64>
          %c0_22 = arith.constant 0 : index
          memref.store %4, %arg5[%3, %c0_22] : memref<?x20xf64>
          %c0_23 = arith.constant 0 : index
          %c4 = arith.constant 4 : index
          %c1_24 = arith.constant 1 : index
          scf.for %arg9 = %c0_23 to %c4 step %c1_24 {
            %c4_33 = arith.constant 4 : index
            %5 = arith.muli %arg9, %c4_33 : index
            %c1_34 = arith.constant 1 : index
            %6 = arith.addi %5, %c1_34 : index
            %c-1 = arith.constant -1 : index
            %7 = arith.addi %6, %c-1 : index
            %8 = memref.load %arg4[%3, %7] : memref<?x20xf64>
            %9 = arith.mulf %8, %cst_2 : f64
            %10 = arith.addf %9, %cst_4 : f64
            %11 = arith.divf %cst, %10 : f64
            memref.store %11, %arg4[%3, %6] : memref<?x20xf64>
            %c-1_35 = arith.constant -1 : index
            %12 = arith.addi %3, %c-1_35 : index
            %13 = memref.load %arg3[%12, %6] : memref<?x20xf64>
            %14 = arith.mulf %13, %cst_6 : f64
            %15 = memref.load %arg3[%3, %6] : memref<?x20xf64>
            %16 = arith.mulf %15, %cst_1 : f64
            %17 = arith.addf %14, %16 : f64
            %c1_36 = arith.constant 1 : index
            %18 = arith.addi %3, %c1_36 : index
            %19 = memref.load %arg3[%18, %6] : memref<?x20xf64>
            %20 = arith.mulf %19, %cst_3 : f64
            %21 = arith.subf %17, %20 : f64
            %c-1_37 = arith.constant -1 : index
            %22 = arith.addi %6, %c-1_37 : index
            %23 = memref.load %arg5[%3, %22] : memref<?x20xf64>
            %24 = arith.mulf %23, %cst_2 : f64
            %25 = arith.subf %21, %24 : f64
            %26 = arith.divf %25, %10 : f64
            memref.store %26, %arg5[%3, %6] : memref<?x20xf64>
            %c1_38 = arith.constant 1 : index
            %27 = arith.addi %6, %c1_38 : index
            %c-1_39 = arith.constant -1 : index
            %28 = arith.addi %27, %c-1_39 : index
            %29 = memref.load %arg4[%3, %28] : memref<?x20xf64>
            %30 = arith.mulf %29, %cst_2 : f64
            %31 = arith.addf %30, %cst_4 : f64
            %32 = arith.divf %cst, %31 : f64
            memref.store %32, %arg4[%3, %27] : memref<?x20xf64>
            %c-1_40 = arith.constant -1 : index
            %33 = arith.addi %3, %c-1_40 : index
            %34 = memref.load %arg3[%33, %27] : memref<?x20xf64>
            %35 = arith.mulf %34, %cst_6 : f64
            %36 = memref.load %arg3[%3, %27] : memref<?x20xf64>
            %37 = arith.mulf %36, %cst_1 : f64
            %38 = arith.addf %35, %37 : f64
            %c1_41 = arith.constant 1 : index
            %39 = arith.addi %3, %c1_41 : index
            %40 = memref.load %arg3[%39, %27] : memref<?x20xf64>
            %41 = arith.mulf %40, %cst_3 : f64
            %42 = arith.subf %38, %41 : f64
            %c-1_42 = arith.constant -1 : index
            %43 = arith.addi %27, %c-1_42 : index
            %44 = memref.load %arg5[%3, %43] : memref<?x20xf64>
            %45 = arith.mulf %44, %cst_2 : f64
            %46 = arith.subf %42, %45 : f64
            %47 = arith.divf %46, %31 : f64
            memref.store %47, %arg5[%3, %27] : memref<?x20xf64>
            %c2_43 = arith.constant 2 : index
            %48 = arith.addi %6, %c2_43 : index
            %c-1_44 = arith.constant -1 : index
            %49 = arith.addi %48, %c-1_44 : index
            %50 = memref.load %arg4[%3, %49] : memref<?x20xf64>
            %51 = arith.mulf %50, %cst_2 : f64
            %52 = arith.addf %51, %cst_4 : f64
            %53 = arith.divf %cst, %52 : f64
            memref.store %53, %arg4[%3, %48] : memref<?x20xf64>
            %c-1_45 = arith.constant -1 : index
            %54 = arith.addi %3, %c-1_45 : index
            %55 = memref.load %arg3[%54, %48] : memref<?x20xf64>
            %56 = arith.mulf %55, %cst_6 : f64
            %57 = memref.load %arg3[%3, %48] : memref<?x20xf64>
            %58 = arith.mulf %57, %cst_1 : f64
            %59 = arith.addf %56, %58 : f64
            %c1_46 = arith.constant 1 : index
            %60 = arith.addi %3, %c1_46 : index
            %61 = memref.load %arg3[%60, %48] : memref<?x20xf64>
            %62 = arith.mulf %61, %cst_3 : f64
            %63 = arith.subf %59, %62 : f64
            %c-1_47 = arith.constant -1 : index
            %64 = arith.addi %48, %c-1_47 : index
            %65 = memref.load %arg5[%3, %64] : memref<?x20xf64>
            %66 = arith.mulf %65, %cst_2 : f64
            %67 = arith.subf %63, %66 : f64
            %68 = arith.divf %67, %52 : f64
            memref.store %68, %arg5[%3, %48] : memref<?x20xf64>
            %c3 = arith.constant 3 : index
            %69 = arith.addi %6, %c3 : index
            %c-1_48 = arith.constant -1 : index
            %70 = arith.addi %69, %c-1_48 : index
            %71 = memref.load %arg4[%3, %70] : memref<?x20xf64>
            %72 = arith.mulf %71, %cst_2 : f64
            %73 = arith.addf %72, %cst_4 : f64
            %74 = arith.divf %cst, %73 : f64
            memref.store %74, %arg4[%3, %69] : memref<?x20xf64>
            %c-1_49 = arith.constant -1 : index
            %75 = arith.addi %3, %c-1_49 : index
            %76 = memref.load %arg3[%75, %69] : memref<?x20xf64>
            %77 = arith.mulf %76, %cst_6 : f64
            %78 = memref.load %arg3[%3, %69] : memref<?x20xf64>
            %79 = arith.mulf %78, %cst_1 : f64
            %80 = arith.addf %77, %79 : f64
            %c1_50 = arith.constant 1 : index
            %81 = arith.addi %3, %c1_50 : index
            %82 = memref.load %arg3[%81, %69] : memref<?x20xf64>
            %83 = arith.mulf %82, %cst_3 : f64
            %84 = arith.subf %80, %83 : f64
            %c-1_51 = arith.constant -1 : index
            %85 = arith.addi %69, %c-1_51 : index
            %86 = memref.load %arg5[%3, %85] : memref<?x20xf64>
            %87 = arith.mulf %86, %cst_2 : f64
            %88 = arith.subf %84, %87 : f64
            %89 = arith.divf %88, %73 : f64
            memref.store %89, %arg5[%3, %69] : memref<?x20xf64>
          }
          %c0_25 = arith.constant 0 : index
          %c2 = arith.constant 2 : index
          %c1_26 = arith.constant 1 : index
          scf.for %arg9 = %c0_25 to %c2 step %c1_26 {
            %c17 = arith.constant 17 : index
            %5 = arith.addi %arg9, %c17 : index
            %c-1 = arith.constant -1 : index
            %6 = arith.addi %5, %c-1 : index
            %7 = memref.load %arg4[%3, %6] : memref<?x20xf64>
            %8 = arith.mulf %7, %cst_2 : f64
            %9 = arith.addf %8, %cst_4 : f64
            %10 = arith.divf %cst, %9 : f64
            memref.store %10, %arg4[%3, %5] : memref<?x20xf64>
            %c-1_33 = arith.constant -1 : index
            %11 = arith.addi %3, %c-1_33 : index
            %12 = memref.load %arg3[%11, %5] : memref<?x20xf64>
            %13 = arith.mulf %12, %cst_6 : f64
            %14 = memref.load %arg3[%3, %5] : memref<?x20xf64>
            %15 = arith.mulf %14, %cst_1 : f64
            %16 = arith.addf %13, %15 : f64
            %c1_34 = arith.constant 1 : index
            %17 = arith.addi %3, %c1_34 : index
            %18 = memref.load %arg3[%17, %5] : memref<?x20xf64>
            %19 = arith.mulf %18, %cst_3 : f64
            %20 = arith.subf %16, %19 : f64
            %c-1_35 = arith.constant -1 : index
            %21 = arith.addi %5, %c-1_35 : index
            %22 = memref.load %arg5[%3, %21] : memref<?x20xf64>
            %23 = arith.mulf %22, %cst_2 : f64
            %24 = arith.subf %20, %23 : f64
            %25 = arith.divf %24, %9 : f64
            memref.store %25, %arg5[%3, %5] : memref<?x20xf64>
          }
          %c19 = arith.constant 19 : index
          memref.store %cst_8, %arg2[%3, %c19] : memref<?x20xf64>
          %c0_27 = arith.constant 0 : index
          %c4_28 = arith.constant 4 : index
          %c1_29 = arith.constant 1 : index
          scf.for %arg9 = %c0_27 to %c4_28 step %c1_29 {
            %c4_33 = arith.constant 4 : index
            %5 = arith.muli %arg9, %c4_33 : index
            %c1_34 = arith.constant 1 : index
            %6 = arith.addi %5, %c1_34 : index
            %c-1 = arith.constant -1 : index
            %7 = arith.muli %6, %c-1 : index
            %c19_35 = arith.constant 19 : index
            %8 = arith.addi %7, %c19_35 : index
            %9 = memref.load %arg4[%3, %8] : memref<?x20xf64>
            %c-1_36 = arith.constant -1 : index
            %10 = arith.muli %6, %c-1_36 : index
            %c20_37 = arith.constant 20 : index
            %11 = arith.addi %10, %c20_37 : index
            %12 = memref.load %arg2[%3, %11] : memref<?x20xf64>
            %13 = arith.mulf %9, %12 : f64
            %c-1_38 = arith.constant -1 : index
            %14 = arith.muli %6, %c-1_38 : index
            %c19_39 = arith.constant 19 : index
            %15 = arith.addi %14, %c19_39 : index
            %16 = memref.load %arg5[%3, %15] : memref<?x20xf64>
            %17 = arith.addf %13, %16 : f64
            %c-1_40 = arith.constant -1 : index
            %18 = arith.muli %6, %c-1_40 : index
            %c19_41 = arith.constant 19 : index
            %19 = arith.addi %18, %c19_41 : index
            memref.store %17, %arg2[%3, %19] : memref<?x20xf64>
            %c1_42 = arith.constant 1 : index
            %20 = arith.addi %6, %c1_42 : index
            %c-1_43 = arith.constant -1 : index
            %21 = arith.muli %20, %c-1_43 : index
            %c19_44 = arith.constant 19 : index
            %22 = arith.addi %21, %c19_44 : index
            %23 = memref.load %arg4[%3, %22] : memref<?x20xf64>
            %c-1_45 = arith.constant -1 : index
            %24 = arith.muli %20, %c-1_45 : index
            %c20_46 = arith.constant 20 : index
            %25 = arith.addi %24, %c20_46 : index
            %26 = memref.load %arg2[%3, %25] : memref<?x20xf64>
            %27 = arith.mulf %23, %26 : f64
            %c-1_47 = arith.constant -1 : index
            %28 = arith.muli %20, %c-1_47 : index
            %c19_48 = arith.constant 19 : index
            %29 = arith.addi %28, %c19_48 : index
            %30 = memref.load %arg5[%3, %29] : memref<?x20xf64>
            %31 = arith.addf %27, %30 : f64
            %c-1_49 = arith.constant -1 : index
            %32 = arith.muli %20, %c-1_49 : index
            %c19_50 = arith.constant 19 : index
            %33 = arith.addi %32, %c19_50 : index
            memref.store %31, %arg2[%3, %33] : memref<?x20xf64>
            %c2_51 = arith.constant 2 : index
            %34 = arith.addi %6, %c2_51 : index
            %c-1_52 = arith.constant -1 : index
            %35 = arith.muli %34, %c-1_52 : index
            %c19_53 = arith.constant 19 : index
            %36 = arith.addi %35, %c19_53 : index
            %37 = memref.load %arg4[%3, %36] : memref<?x20xf64>
            %c-1_54 = arith.constant -1 : index
            %38 = arith.muli %34, %c-1_54 : index
            %c20_55 = arith.constant 20 : index
            %39 = arith.addi %38, %c20_55 : index
            %40 = memref.load %arg2[%3, %39] : memref<?x20xf64>
            %41 = arith.mulf %37, %40 : f64
            %c-1_56 = arith.constant -1 : index
            %42 = arith.muli %34, %c-1_56 : index
            %c19_57 = arith.constant 19 : index
            %43 = arith.addi %42, %c19_57 : index
            %44 = memref.load %arg5[%3, %43] : memref<?x20xf64>
            %45 = arith.addf %41, %44 : f64
            %c-1_58 = arith.constant -1 : index
            %46 = arith.muli %34, %c-1_58 : index
            %c19_59 = arith.constant 19 : index
            %47 = arith.addi %46, %c19_59 : index
            memref.store %45, %arg2[%3, %47] : memref<?x20xf64>
            %c3 = arith.constant 3 : index
            %48 = arith.addi %6, %c3 : index
            %c-1_60 = arith.constant -1 : index
            %49 = arith.muli %48, %c-1_60 : index
            %c19_61 = arith.constant 19 : index
            %50 = arith.addi %49, %c19_61 : index
            %51 = memref.load %arg4[%3, %50] : memref<?x20xf64>
            %c-1_62 = arith.constant -1 : index
            %52 = arith.muli %48, %c-1_62 : index
            %c20_63 = arith.constant 20 : index
            %53 = arith.addi %52, %c20_63 : index
            %54 = memref.load %arg2[%3, %53] : memref<?x20xf64>
            %55 = arith.mulf %51, %54 : f64
            %c-1_64 = arith.constant -1 : index
            %56 = arith.muli %48, %c-1_64 : index
            %c19_65 = arith.constant 19 : index
            %57 = arith.addi %56, %c19_65 : index
            %58 = memref.load %arg5[%3, %57] : memref<?x20xf64>
            %59 = arith.addf %55, %58 : f64
            %c-1_66 = arith.constant -1 : index
            %60 = arith.muli %48, %c-1_66 : index
            %c19_67 = arith.constant 19 : index
            %61 = arith.addi %60, %c19_67 : index
            memref.store %59, %arg2[%3, %61] : memref<?x20xf64>
          }
          %c0_30 = arith.constant 0 : index
          %c2_31 = arith.constant 2 : index
          %c1_32 = arith.constant 1 : index
          scf.for %arg9 = %c0_30 to %c2_31 step %c1_32 {
            %c17 = arith.constant 17 : index
            %5 = arith.addi %arg9, %c17 : index
            %c-1 = arith.constant -1 : index
            %6 = arith.muli %5, %c-1 : index
            %c19_33 = arith.constant 19 : index
            %7 = arith.addi %6, %c19_33 : index
            %8 = memref.load %arg4[%3, %7] : memref<?x20xf64>
            %c-1_34 = arith.constant -1 : index
            %9 = arith.muli %5, %c-1_34 : index
            %c20_35 = arith.constant 20 : index
            %10 = arith.addi %9, %c20_35 : index
            %11 = memref.load %arg2[%3, %10] : memref<?x20xf64>
            %12 = arith.mulf %8, %11 : f64
            %c-1_36 = arith.constant -1 : index
            %13 = arith.muli %5, %c-1_36 : index
            %c19_37 = arith.constant 19 : index
            %14 = arith.addi %13, %c19_37 : index
            %15 = memref.load %arg5[%3, %14] : memref<?x20xf64>
            %16 = arith.addf %12, %15 : f64
            %c-1_38 = arith.constant -1 : index
            %17 = arith.muli %5, %c-1_38 : index
            %c19_39 = arith.constant 19 : index
            %18 = arith.addi %17, %c19_39 : index
            memref.store %16, %arg2[%3, %18] : memref<?x20xf64>
          }
        }
      }
    }
    return
  }
}

