module {
  func.func @kernel_seidel_2d(%arg0: i32, %arg1: i32, %arg2: memref<?x40xf64>) {
    %cst = arith.constant 9.000000e+00 : f64
    %c0 = arith.constant 0 : index
    %c20 = arith.constant 20 : index
    %c1 = arith.constant 1 : index
    scf.for %arg3 = %c0 to %c20 step %c1 {
      %c1_0 = arith.constant 1 : index
      %c39 = arith.constant 39 : index
      %c1_1 = arith.constant 1 : index
      scf.for %arg4 = %c1_0 to %c39 step %c1_1 {
        %c1_2 = arith.constant 1 : index
        %c37 = arith.constant 37 : index
        %c4 = arith.constant 4 : index
        scf.for %arg5 = %c1_2 to %c37 step %c4 {
          %c-1 = arith.constant -1 : index
          %0 = arith.addi %arg4, %c-1 : index
          %c-1_6 = arith.constant -1 : index
          %1 = arith.addi %arg5, %c-1_6 : index
          %2 = memref.load %arg2[%0, %1] : memref<?x40xf64>
          %c-1_7 = arith.constant -1 : index
          %3 = arith.addi %arg4, %c-1_7 : index
          %4 = memref.load %arg2[%3, %arg5] : memref<?x40xf64>
          %5 = arith.addf %2, %4 : f64
          %c-1_8 = arith.constant -1 : index
          %6 = arith.addi %arg4, %c-1_8 : index
          %c1_9 = arith.constant 1 : index
          %7 = arith.addi %arg5, %c1_9 : index
          %8 = memref.load %arg2[%6, %7] : memref<?x40xf64>
          %9 = arith.addf %5, %8 : f64
          %c-1_10 = arith.constant -1 : index
          %10 = arith.addi %arg5, %c-1_10 : index
          %11 = memref.load %arg2[%arg4, %10] : memref<?x40xf64>
          %12 = arith.addf %9, %11 : f64
          %13 = memref.load %arg2[%arg4, %arg5] : memref<?x40xf64>
          %14 = arith.addf %12, %13 : f64
          %c1_11 = arith.constant 1 : index
          %15 = arith.addi %arg5, %c1_11 : index
          %16 = memref.load %arg2[%arg4, %15] : memref<?x40xf64>
          %17 = arith.addf %14, %16 : f64
          %c1_12 = arith.constant 1 : index
          %18 = arith.addi %arg4, %c1_12 : index
          %c-1_13 = arith.constant -1 : index
          %19 = arith.addi %arg5, %c-1_13 : index
          %20 = memref.load %arg2[%18, %19] : memref<?x40xf64>
          %21 = arith.addf %17, %20 : f64
          %c1_14 = arith.constant 1 : index
          %22 = arith.addi %arg4, %c1_14 : index
          %23 = memref.load %arg2[%22, %arg5] : memref<?x40xf64>
          %24 = arith.addf %21, %23 : f64
          %c1_15 = arith.constant 1 : index
          %25 = arith.addi %arg4, %c1_15 : index
          %c1_16 = arith.constant 1 : index
          %26 = arith.addi %arg5, %c1_16 : index
          %27 = memref.load %arg2[%25, %26] : memref<?x40xf64>
          %28 = arith.addf %24, %27 : f64
          %29 = arith.divf %28, %cst : f64
          memref.store %29, %arg2[%arg4, %arg5] : memref<?x40xf64>
          %c1_17 = arith.constant 1 : index
          %30 = arith.addi %arg5, %c1_17 : index
          %c-1_18 = arith.constant -1 : index
          %31 = arith.addi %arg4, %c-1_18 : index
          %c-1_19 = arith.constant -1 : index
          %32 = arith.addi %30, %c-1_19 : index
          %33 = memref.load %arg2[%31, %32] : memref<?x40xf64>
          %c-1_20 = arith.constant -1 : index
          %34 = arith.addi %arg4, %c-1_20 : index
          %35 = memref.load %arg2[%34, %30] : memref<?x40xf64>
          %36 = arith.addf %33, %35 : f64
          %c-1_21 = arith.constant -1 : index
          %37 = arith.addi %arg4, %c-1_21 : index
          %c1_22 = arith.constant 1 : index
          %38 = arith.addi %30, %c1_22 : index
          %39 = memref.load %arg2[%37, %38] : memref<?x40xf64>
          %40 = arith.addf %36, %39 : f64
          %c-1_23 = arith.constant -1 : index
          %41 = arith.addi %30, %c-1_23 : index
          %42 = memref.load %arg2[%arg4, %41] : memref<?x40xf64>
          %43 = arith.addf %40, %42 : f64
          %44 = memref.load %arg2[%arg4, %30] : memref<?x40xf64>
          %45 = arith.addf %43, %44 : f64
          %c1_24 = arith.constant 1 : index
          %46 = arith.addi %30, %c1_24 : index
          %47 = memref.load %arg2[%arg4, %46] : memref<?x40xf64>
          %48 = arith.addf %45, %47 : f64
          %c1_25 = arith.constant 1 : index
          %49 = arith.addi %arg4, %c1_25 : index
          %c-1_26 = arith.constant -1 : index
          %50 = arith.addi %30, %c-1_26 : index
          %51 = memref.load %arg2[%49, %50] : memref<?x40xf64>
          %52 = arith.addf %48, %51 : f64
          %c1_27 = arith.constant 1 : index
          %53 = arith.addi %arg4, %c1_27 : index
          %54 = memref.load %arg2[%53, %30] : memref<?x40xf64>
          %55 = arith.addf %52, %54 : f64
          %c1_28 = arith.constant 1 : index
          %56 = arith.addi %arg4, %c1_28 : index
          %c1_29 = arith.constant 1 : index
          %57 = arith.addi %30, %c1_29 : index
          %58 = memref.load %arg2[%56, %57] : memref<?x40xf64>
          %59 = arith.addf %55, %58 : f64
          %60 = arith.divf %59, %cst : f64
          memref.store %60, %arg2[%arg4, %30] : memref<?x40xf64>
          %c2 = arith.constant 2 : index
          %61 = arith.addi %arg5, %c2 : index
          %c-1_30 = arith.constant -1 : index
          %62 = arith.addi %arg4, %c-1_30 : index
          %c-1_31 = arith.constant -1 : index
          %63 = arith.addi %61, %c-1_31 : index
          %64 = memref.load %arg2[%62, %63] : memref<?x40xf64>
          %c-1_32 = arith.constant -1 : index
          %65 = arith.addi %arg4, %c-1_32 : index
          %66 = memref.load %arg2[%65, %61] : memref<?x40xf64>
          %67 = arith.addf %64, %66 : f64
          %c-1_33 = arith.constant -1 : index
          %68 = arith.addi %arg4, %c-1_33 : index
          %c1_34 = arith.constant 1 : index
          %69 = arith.addi %61, %c1_34 : index
          %70 = memref.load %arg2[%68, %69] : memref<?x40xf64>
          %71 = arith.addf %67, %70 : f64
          %c-1_35 = arith.constant -1 : index
          %72 = arith.addi %61, %c-1_35 : index
          %73 = memref.load %arg2[%arg4, %72] : memref<?x40xf64>
          %74 = arith.addf %71, %73 : f64
          %75 = memref.load %arg2[%arg4, %61] : memref<?x40xf64>
          %76 = arith.addf %74, %75 : f64
          %c1_36 = arith.constant 1 : index
          %77 = arith.addi %61, %c1_36 : index
          %78 = memref.load %arg2[%arg4, %77] : memref<?x40xf64>
          %79 = arith.addf %76, %78 : f64
          %c1_37 = arith.constant 1 : index
          %80 = arith.addi %arg4, %c1_37 : index
          %c-1_38 = arith.constant -1 : index
          %81 = arith.addi %61, %c-1_38 : index
          %82 = memref.load %arg2[%80, %81] : memref<?x40xf64>
          %83 = arith.addf %79, %82 : f64
          %c1_39 = arith.constant 1 : index
          %84 = arith.addi %arg4, %c1_39 : index
          %85 = memref.load %arg2[%84, %61] : memref<?x40xf64>
          %86 = arith.addf %83, %85 : f64
          %c1_40 = arith.constant 1 : index
          %87 = arith.addi %arg4, %c1_40 : index
          %c1_41 = arith.constant 1 : index
          %88 = arith.addi %61, %c1_41 : index
          %89 = memref.load %arg2[%87, %88] : memref<?x40xf64>
          %90 = arith.addf %86, %89 : f64
          %91 = arith.divf %90, %cst : f64
          memref.store %91, %arg2[%arg4, %61] : memref<?x40xf64>
          %c3 = arith.constant 3 : index
          %92 = arith.addi %arg5, %c3 : index
          %c-1_42 = arith.constant -1 : index
          %93 = arith.addi %arg4, %c-1_42 : index
          %c-1_43 = arith.constant -1 : index
          %94 = arith.addi %92, %c-1_43 : index
          %95 = memref.load %arg2[%93, %94] : memref<?x40xf64>
          %c-1_44 = arith.constant -1 : index
          %96 = arith.addi %arg4, %c-1_44 : index
          %97 = memref.load %arg2[%96, %92] : memref<?x40xf64>
          %98 = arith.addf %95, %97 : f64
          %c-1_45 = arith.constant -1 : index
          %99 = arith.addi %arg4, %c-1_45 : index
          %c1_46 = arith.constant 1 : index
          %100 = arith.addi %92, %c1_46 : index
          %101 = memref.load %arg2[%99, %100] : memref<?x40xf64>
          %102 = arith.addf %98, %101 : f64
          %c-1_47 = arith.constant -1 : index
          %103 = arith.addi %92, %c-1_47 : index
          %104 = memref.load %arg2[%arg4, %103] : memref<?x40xf64>
          %105 = arith.addf %102, %104 : f64
          %106 = memref.load %arg2[%arg4, %92] : memref<?x40xf64>
          %107 = arith.addf %105, %106 : f64
          %c1_48 = arith.constant 1 : index
          %108 = arith.addi %92, %c1_48 : index
          %109 = memref.load %arg2[%arg4, %108] : memref<?x40xf64>
          %110 = arith.addf %107, %109 : f64
          %c1_49 = arith.constant 1 : index
          %111 = arith.addi %arg4, %c1_49 : index
          %c-1_50 = arith.constant -1 : index
          %112 = arith.addi %92, %c-1_50 : index
          %113 = memref.load %arg2[%111, %112] : memref<?x40xf64>
          %114 = arith.addf %110, %113 : f64
          %c1_51 = arith.constant 1 : index
          %115 = arith.addi %arg4, %c1_51 : index
          %116 = memref.load %arg2[%115, %92] : memref<?x40xf64>
          %117 = arith.addf %114, %116 : f64
          %c1_52 = arith.constant 1 : index
          %118 = arith.addi %arg4, %c1_52 : index
          %c1_53 = arith.constant 1 : index
          %119 = arith.addi %92, %c1_53 : index
          %120 = memref.load %arg2[%118, %119] : memref<?x40xf64>
          %121 = arith.addf %117, %120 : f64
          %122 = arith.divf %121, %cst : f64
          memref.store %122, %arg2[%arg4, %92] : memref<?x40xf64>
        }
        %c37_3 = arith.constant 37 : index
        %c39_4 = arith.constant 39 : index
        %c1_5 = arith.constant 1 : index
        scf.for %arg5 = %c37_3 to %c39_4 step %c1_5 {
          %c-1 = arith.constant -1 : index
          %0 = arith.addi %arg4, %c-1 : index
          %c-1_6 = arith.constant -1 : index
          %1 = arith.addi %arg5, %c-1_6 : index
          %2 = memref.load %arg2[%0, %1] : memref<?x40xf64>
          %c-1_7 = arith.constant -1 : index
          %3 = arith.addi %arg4, %c-1_7 : index
          %4 = memref.load %arg2[%3, %arg5] : memref<?x40xf64>
          %5 = arith.addf %2, %4 : f64
          %c-1_8 = arith.constant -1 : index
          %6 = arith.addi %arg4, %c-1_8 : index
          %c1_9 = arith.constant 1 : index
          %7 = arith.addi %arg5, %c1_9 : index
          %8 = memref.load %arg2[%6, %7] : memref<?x40xf64>
          %9 = arith.addf %5, %8 : f64
          %c-1_10 = arith.constant -1 : index
          %10 = arith.addi %arg5, %c-1_10 : index
          %11 = memref.load %arg2[%arg4, %10] : memref<?x40xf64>
          %12 = arith.addf %9, %11 : f64
          %13 = memref.load %arg2[%arg4, %arg5] : memref<?x40xf64>
          %14 = arith.addf %12, %13 : f64
          %c1_11 = arith.constant 1 : index
          %15 = arith.addi %arg5, %c1_11 : index
          %16 = memref.load %arg2[%arg4, %15] : memref<?x40xf64>
          %17 = arith.addf %14, %16 : f64
          %c1_12 = arith.constant 1 : index
          %18 = arith.addi %arg4, %c1_12 : index
          %c-1_13 = arith.constant -1 : index
          %19 = arith.addi %arg5, %c-1_13 : index
          %20 = memref.load %arg2[%18, %19] : memref<?x40xf64>
          %21 = arith.addf %17, %20 : f64
          %c1_14 = arith.constant 1 : index
          %22 = arith.addi %arg4, %c1_14 : index
          %23 = memref.load %arg2[%22, %arg5] : memref<?x40xf64>
          %24 = arith.addf %21, %23 : f64
          %c1_15 = arith.constant 1 : index
          %25 = arith.addi %arg4, %c1_15 : index
          %c1_16 = arith.constant 1 : index
          %26 = arith.addi %arg5, %c1_16 : index
          %27 = memref.load %arg2[%25, %26] : memref<?x40xf64>
          %28 = arith.addf %24, %27 : f64
          %29 = arith.divf %28, %cst : f64
          memref.store %29, %arg2[%arg4, %arg5] : memref<?x40xf64>
        }
      }
    }
    return
  }
}

