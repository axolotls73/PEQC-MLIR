module {
  func.func @kernel_heat_3d(%arg0: i32, %arg1: i32, %arg2: memref<?x10x10xf64>, %arg3: memref<?x10x10xf64>) {
    %cst = arith.constant 1.250000e-01 : f64
    %cst_0 = arith.constant 2.000000e+00 : f64
    %c0 = arith.constant 0 : index
    %c20 = arith.constant 20 : index
    %c1 = arith.constant 1 : index
    scf.for %arg4 = %c0 to %c20 step %c1 {
      %c1_1 = arith.constant 1 : index
      %0 = arith.addi %arg4, %c1_1 : index
      %c0_2 = arith.constant 0 : index
      %c1_3 = arith.constant 1 : index
      %c1_4 = arith.constant 1 : index
      scf.parallel (%arg5) = (%c0_2) to (%c1_3) step (%c1_4) {
        %1 = arith.addi %0, %arg5 : index
        %c0_5 = arith.constant 0 : index
        %c8 = arith.constant 8 : index
        %c1_6 = arith.constant 1 : index
        scf.for %arg6 = %c0_5 to %c8 step %c1_6 {
          %c1_10 = arith.constant 1 : index
          %2 = arith.addi %arg6, %c1_10 : index
          %c0_11 = arith.constant 0 : index
          %c2 = arith.constant 2 : index
          %c1_12 = arith.constant 1 : index
          scf.for %arg7 = %c0_11 to %c2 step %c1_12 {
            %c4 = arith.constant 4 : index
            %3 = arith.muli %arg7, %c4 : index
            %c1_13 = arith.constant 1 : index
            %4 = arith.addi %3, %c1_13 : index
            %c0_14 = arith.constant 0 : index
            %c8_15 = arith.constant 8 : index
            %c1_16 = arith.constant 1 : index
            scf.for %arg8 = %c0_14 to %c8_15 step %c1_16 {
              %c1_17 = arith.constant 1 : index
              %5 = arith.addi %arg8, %c1_17 : index
              %c1_18 = arith.constant 1 : index
              %6 = arith.addi %5, %c1_18 : index
              %7 = memref.load %arg2[%6, %2, %4] : memref<?x10x10xf64>
              %8 = memref.load %arg2[%5, %2, %4] : memref<?x10x10xf64>
              %9 = arith.mulf %8, %cst_0 : f64
              %10 = arith.subf %7, %9 : f64
              %c-1 = arith.constant -1 : index
              %11 = arith.addi %5, %c-1 : index
              %12 = memref.load %arg2[%11, %2, %4] : memref<?x10x10xf64>
              %13 = arith.addf %10, %12 : f64
              %14 = arith.mulf %13, %cst : f64
              %c1_19 = arith.constant 1 : index
              %15 = arith.addi %2, %c1_19 : index
              %16 = memref.load %arg2[%5, %15, %4] : memref<?x10x10xf64>
              %17 = arith.subf %16, %9 : f64
              %c-1_20 = arith.constant -1 : index
              %18 = arith.addi %2, %c-1_20 : index
              %19 = memref.load %arg2[%5, %18, %4] : memref<?x10x10xf64>
              %20 = arith.addf %17, %19 : f64
              %21 = arith.mulf %20, %cst : f64
              %22 = arith.addf %14, %21 : f64
              %c1_21 = arith.constant 1 : index
              %23 = arith.addi %4, %c1_21 : index
              %24 = memref.load %arg2[%5, %2, %23] : memref<?x10x10xf64>
              %25 = arith.subf %24, %9 : f64
              %c-1_22 = arith.constant -1 : index
              %26 = arith.addi %4, %c-1_22 : index
              %27 = memref.load %arg2[%5, %2, %26] : memref<?x10x10xf64>
              %28 = arith.addf %25, %27 : f64
              %29 = arith.mulf %28, %cst : f64
              %30 = arith.addf %22, %29 : f64
              %31 = arith.addf %30, %8 : f64
              memref.store %31, %arg3[%5, %2, %4] : memref<?x10x10xf64>
              %c1_23 = arith.constant 1 : index
              %32 = arith.addi %4, %c1_23 : index
              %c1_24 = arith.constant 1 : index
              %33 = arith.addi %5, %c1_24 : index
              %34 = memref.load %arg2[%33, %2, %32] : memref<?x10x10xf64>
              %35 = memref.load %arg2[%5, %2, %32] : memref<?x10x10xf64>
              %36 = arith.mulf %35, %cst_0 : f64
              %37 = arith.subf %34, %36 : f64
              %c-1_25 = arith.constant -1 : index
              %38 = arith.addi %5, %c-1_25 : index
              %39 = memref.load %arg2[%38, %2, %32] : memref<?x10x10xf64>
              %40 = arith.addf %37, %39 : f64
              %41 = arith.mulf %40, %cst : f64
              %c1_26 = arith.constant 1 : index
              %42 = arith.addi %2, %c1_26 : index
              %43 = memref.load %arg2[%5, %42, %32] : memref<?x10x10xf64>
              %44 = arith.subf %43, %36 : f64
              %c-1_27 = arith.constant -1 : index
              %45 = arith.addi %2, %c-1_27 : index
              %46 = memref.load %arg2[%5, %45, %32] : memref<?x10x10xf64>
              %47 = arith.addf %44, %46 : f64
              %48 = arith.mulf %47, %cst : f64
              %49 = arith.addf %41, %48 : f64
              %c1_28 = arith.constant 1 : index
              %50 = arith.addi %32, %c1_28 : index
              %51 = memref.load %arg2[%5, %2, %50] : memref<?x10x10xf64>
              %52 = arith.subf %51, %36 : f64
              %c-1_29 = arith.constant -1 : index
              %53 = arith.addi %32, %c-1_29 : index
              %54 = memref.load %arg2[%5, %2, %53] : memref<?x10x10xf64>
              %55 = arith.addf %52, %54 : f64
              %56 = arith.mulf %55, %cst : f64
              %57 = arith.addf %49, %56 : f64
              %58 = arith.addf %57, %35 : f64
              memref.store %58, %arg3[%5, %2, %32] : memref<?x10x10xf64>
              %c2_30 = arith.constant 2 : index
              %59 = arith.addi %4, %c2_30 : index
              %c1_31 = arith.constant 1 : index
              %60 = arith.addi %5, %c1_31 : index
              %61 = memref.load %arg2[%60, %2, %59] : memref<?x10x10xf64>
              %62 = memref.load %arg2[%5, %2, %59] : memref<?x10x10xf64>
              %63 = arith.mulf %62, %cst_0 : f64
              %64 = arith.subf %61, %63 : f64
              %c-1_32 = arith.constant -1 : index
              %65 = arith.addi %5, %c-1_32 : index
              %66 = memref.load %arg2[%65, %2, %59] : memref<?x10x10xf64>
              %67 = arith.addf %64, %66 : f64
              %68 = arith.mulf %67, %cst : f64
              %c1_33 = arith.constant 1 : index
              %69 = arith.addi %2, %c1_33 : index
              %70 = memref.load %arg2[%5, %69, %59] : memref<?x10x10xf64>
              %71 = arith.subf %70, %63 : f64
              %c-1_34 = arith.constant -1 : index
              %72 = arith.addi %2, %c-1_34 : index
              %73 = memref.load %arg2[%5, %72, %59] : memref<?x10x10xf64>
              %74 = arith.addf %71, %73 : f64
              %75 = arith.mulf %74, %cst : f64
              %76 = arith.addf %68, %75 : f64
              %c1_35 = arith.constant 1 : index
              %77 = arith.addi %59, %c1_35 : index
              %78 = memref.load %arg2[%5, %2, %77] : memref<?x10x10xf64>
              %79 = arith.subf %78, %63 : f64
              %c-1_36 = arith.constant -1 : index
              %80 = arith.addi %59, %c-1_36 : index
              %81 = memref.load %arg2[%5, %2, %80] : memref<?x10x10xf64>
              %82 = arith.addf %79, %81 : f64
              %83 = arith.mulf %82, %cst : f64
              %84 = arith.addf %76, %83 : f64
              %85 = arith.addf %84, %62 : f64
              memref.store %85, %arg3[%5, %2, %59] : memref<?x10x10xf64>
              %c3 = arith.constant 3 : index
              %86 = arith.addi %4, %c3 : index
              %c1_37 = arith.constant 1 : index
              %87 = arith.addi %5, %c1_37 : index
              %88 = memref.load %arg2[%87, %2, %86] : memref<?x10x10xf64>
              %89 = memref.load %arg2[%5, %2, %86] : memref<?x10x10xf64>
              %90 = arith.mulf %89, %cst_0 : f64
              %91 = arith.subf %88, %90 : f64
              %c-1_38 = arith.constant -1 : index
              %92 = arith.addi %5, %c-1_38 : index
              %93 = memref.load %arg2[%92, %2, %86] : memref<?x10x10xf64>
              %94 = arith.addf %91, %93 : f64
              %95 = arith.mulf %94, %cst : f64
              %c1_39 = arith.constant 1 : index
              %96 = arith.addi %2, %c1_39 : index
              %97 = memref.load %arg2[%5, %96, %86] : memref<?x10x10xf64>
              %98 = arith.subf %97, %90 : f64
              %c-1_40 = arith.constant -1 : index
              %99 = arith.addi %2, %c-1_40 : index
              %100 = memref.load %arg2[%5, %99, %86] : memref<?x10x10xf64>
              %101 = arith.addf %98, %100 : f64
              %102 = arith.mulf %101, %cst : f64
              %103 = arith.addf %95, %102 : f64
              %c1_41 = arith.constant 1 : index
              %104 = arith.addi %86, %c1_41 : index
              %105 = memref.load %arg2[%5, %2, %104] : memref<?x10x10xf64>
              %106 = arith.subf %105, %90 : f64
              %c-1_42 = arith.constant -1 : index
              %107 = arith.addi %86, %c-1_42 : index
              %108 = memref.load %arg2[%5, %2, %107] : memref<?x10x10xf64>
              %109 = arith.addf %106, %108 : f64
              %110 = arith.mulf %109, %cst : f64
              %111 = arith.addf %103, %110 : f64
              %112 = arith.addf %111, %89 : f64
              memref.store %112, %arg3[%5, %2, %86] : memref<?x10x10xf64>
            }
          }
        }
        %c0_7 = arith.constant 0 : index
        %c8_8 = arith.constant 8 : index
        %c1_9 = arith.constant 1 : index
        scf.for %arg6 = %c0_7 to %c8_8 step %c1_9 {
          %c1_10 = arith.constant 1 : index
          %2 = arith.addi %arg6, %c1_10 : index
          %c0_11 = arith.constant 0 : index
          %c2 = arith.constant 2 : index
          %c1_12 = arith.constant 1 : index
          scf.for %arg7 = %c0_11 to %c2 step %c1_12 {
            %c4 = arith.constant 4 : index
            %3 = arith.muli %arg7, %c4 : index
            %c1_13 = arith.constant 1 : index
            %4 = arith.addi %3, %c1_13 : index
            %c0_14 = arith.constant 0 : index
            %c8_15 = arith.constant 8 : index
            %c1_16 = arith.constant 1 : index
            scf.for %arg8 = %c0_14 to %c8_15 step %c1_16 {
              %c1_17 = arith.constant 1 : index
              %5 = arith.addi %arg8, %c1_17 : index
              %c1_18 = arith.constant 1 : index
              %6 = arith.addi %5, %c1_18 : index
              %7 = memref.load %arg3[%6, %2, %4] : memref<?x10x10xf64>
              %8 = memref.load %arg3[%5, %2, %4] : memref<?x10x10xf64>
              %9 = arith.mulf %8, %cst_0 : f64
              %10 = arith.subf %7, %9 : f64
              %c-1 = arith.constant -1 : index
              %11 = arith.addi %5, %c-1 : index
              %12 = memref.load %arg3[%11, %2, %4] : memref<?x10x10xf64>
              %13 = arith.addf %10, %12 : f64
              %14 = arith.mulf %13, %cst : f64
              %c1_19 = arith.constant 1 : index
              %15 = arith.addi %2, %c1_19 : index
              %16 = memref.load %arg3[%5, %15, %4] : memref<?x10x10xf64>
              %17 = arith.subf %16, %9 : f64
              %c-1_20 = arith.constant -1 : index
              %18 = arith.addi %2, %c-1_20 : index
              %19 = memref.load %arg3[%5, %18, %4] : memref<?x10x10xf64>
              %20 = arith.addf %17, %19 : f64
              %21 = arith.mulf %20, %cst : f64
              %22 = arith.addf %14, %21 : f64
              %c1_21 = arith.constant 1 : index
              %23 = arith.addi %4, %c1_21 : index
              %24 = memref.load %arg3[%5, %2, %23] : memref<?x10x10xf64>
              %25 = arith.subf %24, %9 : f64
              %c-1_22 = arith.constant -1 : index
              %26 = arith.addi %4, %c-1_22 : index
              %27 = memref.load %arg3[%5, %2, %26] : memref<?x10x10xf64>
              %28 = arith.addf %25, %27 : f64
              %29 = arith.mulf %28, %cst : f64
              %30 = arith.addf %22, %29 : f64
              %31 = arith.addf %30, %8 : f64
              memref.store %31, %arg2[%5, %2, %4] : memref<?x10x10xf64>
              %c1_23 = arith.constant 1 : index
              %32 = arith.addi %4, %c1_23 : index
              %c1_24 = arith.constant 1 : index
              %33 = arith.addi %5, %c1_24 : index
              %34 = memref.load %arg3[%33, %2, %32] : memref<?x10x10xf64>
              %35 = memref.load %arg3[%5, %2, %32] : memref<?x10x10xf64>
              %36 = arith.mulf %35, %cst_0 : f64
              %37 = arith.subf %34, %36 : f64
              %c-1_25 = arith.constant -1 : index
              %38 = arith.addi %5, %c-1_25 : index
              %39 = memref.load %arg3[%38, %2, %32] : memref<?x10x10xf64>
              %40 = arith.addf %37, %39 : f64
              %41 = arith.mulf %40, %cst : f64
              %c1_26 = arith.constant 1 : index
              %42 = arith.addi %2, %c1_26 : index
              %43 = memref.load %arg3[%5, %42, %32] : memref<?x10x10xf64>
              %44 = arith.subf %43, %36 : f64
              %c-1_27 = arith.constant -1 : index
              %45 = arith.addi %2, %c-1_27 : index
              %46 = memref.load %arg3[%5, %45, %32] : memref<?x10x10xf64>
              %47 = arith.addf %44, %46 : f64
              %48 = arith.mulf %47, %cst : f64
              %49 = arith.addf %41, %48 : f64
              %c1_28 = arith.constant 1 : index
              %50 = arith.addi %32, %c1_28 : index
              %51 = memref.load %arg3[%5, %2, %50] : memref<?x10x10xf64>
              %52 = arith.subf %51, %36 : f64
              %c-1_29 = arith.constant -1 : index
              %53 = arith.addi %32, %c-1_29 : index
              %54 = memref.load %arg3[%5, %2, %53] : memref<?x10x10xf64>
              %55 = arith.addf %52, %54 : f64
              %56 = arith.mulf %55, %cst : f64
              %57 = arith.addf %49, %56 : f64
              %58 = arith.addf %57, %35 : f64
              memref.store %58, %arg2[%5, %2, %32] : memref<?x10x10xf64>
              %c2_30 = arith.constant 2 : index
              %59 = arith.addi %4, %c2_30 : index
              %c1_31 = arith.constant 1 : index
              %60 = arith.addi %5, %c1_31 : index
              %61 = memref.load %arg3[%60, %2, %59] : memref<?x10x10xf64>
              %62 = memref.load %arg3[%5, %2, %59] : memref<?x10x10xf64>
              %63 = arith.mulf %62, %cst_0 : f64
              %64 = arith.subf %61, %63 : f64
              %c-1_32 = arith.constant -1 : index
              %65 = arith.addi %5, %c-1_32 : index
              %66 = memref.load %arg3[%65, %2, %59] : memref<?x10x10xf64>
              %67 = arith.addf %64, %66 : f64
              %68 = arith.mulf %67, %cst : f64
              %c1_33 = arith.constant 1 : index
              %69 = arith.addi %2, %c1_33 : index
              %70 = memref.load %arg3[%5, %69, %59] : memref<?x10x10xf64>
              %71 = arith.subf %70, %63 : f64
              %c-1_34 = arith.constant -1 : index
              %72 = arith.addi %2, %c-1_34 : index
              %73 = memref.load %arg3[%5, %72, %59] : memref<?x10x10xf64>
              %74 = arith.addf %71, %73 : f64
              %75 = arith.mulf %74, %cst : f64
              %76 = arith.addf %68, %75 : f64
              %c1_35 = arith.constant 1 : index
              %77 = arith.addi %59, %c1_35 : index
              %78 = memref.load %arg3[%5, %2, %77] : memref<?x10x10xf64>
              %79 = arith.subf %78, %63 : f64
              %c-1_36 = arith.constant -1 : index
              %80 = arith.addi %59, %c-1_36 : index
              %81 = memref.load %arg3[%5, %2, %80] : memref<?x10x10xf64>
              %82 = arith.addf %79, %81 : f64
              %83 = arith.mulf %82, %cst : f64
              %84 = arith.addf %76, %83 : f64
              %85 = arith.addf %84, %62 : f64
              memref.store %85, %arg2[%5, %2, %59] : memref<?x10x10xf64>
              %c3 = arith.constant 3 : index
              %86 = arith.addi %4, %c3 : index
              %c1_37 = arith.constant 1 : index
              %87 = arith.addi %5, %c1_37 : index
              %88 = memref.load %arg3[%87, %2, %86] : memref<?x10x10xf64>
              %89 = memref.load %arg3[%5, %2, %86] : memref<?x10x10xf64>
              %90 = arith.mulf %89, %cst_0 : f64
              %91 = arith.subf %88, %90 : f64
              %c-1_38 = arith.constant -1 : index
              %92 = arith.addi %5, %c-1_38 : index
              %93 = memref.load %arg3[%92, %2, %86] : memref<?x10x10xf64>
              %94 = arith.addf %91, %93 : f64
              %95 = arith.mulf %94, %cst : f64
              %c1_39 = arith.constant 1 : index
              %96 = arith.addi %2, %c1_39 : index
              %97 = memref.load %arg3[%5, %96, %86] : memref<?x10x10xf64>
              %98 = arith.subf %97, %90 : f64
              %c-1_40 = arith.constant -1 : index
              %99 = arith.addi %2, %c-1_40 : index
              %100 = memref.load %arg3[%5, %99, %86] : memref<?x10x10xf64>
              %101 = arith.addf %98, %100 : f64
              %102 = arith.mulf %101, %cst : f64
              %103 = arith.addf %95, %102 : f64
              %c1_41 = arith.constant 1 : index
              %104 = arith.addi %86, %c1_41 : index
              %105 = memref.load %arg3[%5, %2, %104] : memref<?x10x10xf64>
              %106 = arith.subf %105, %90 : f64
              %c-1_42 = arith.constant -1 : index
              %107 = arith.addi %86, %c-1_42 : index
              %108 = memref.load %arg3[%5, %2, %107] : memref<?x10x10xf64>
              %109 = arith.addf %106, %108 : f64
              %110 = arith.mulf %109, %cst : f64
              %111 = arith.addf %103, %110 : f64
              %112 = arith.addf %111, %89 : f64
              memref.store %112, %arg2[%5, %2, %86] : memref<?x10x10xf64>
            }
          }
        }
        scf.reduce 
      }
    }
    return
  }
}

